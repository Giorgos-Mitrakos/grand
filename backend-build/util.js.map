{"version":3,"sources":["../backend/util.js"],"names":["getToken","user","jwt","sign","username","email","isAdmin","config","JWT_SECRET","expiresIn","isAuth","req","res","next","token","headers","authorization","onlyToken","slice","length","verify","err","decode","status","send","msg","parseInt","isSuperAdmin"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD,EAAU;AACvB,SAAQC,yBAAIC,IAAJ,CAAS;AACb;AACAC,IAAAA,QAAQ,EAAEH,IAAI,CAACG,QAFF;AAGbC,IAAAA,KAAK,EAAEJ,IAAI,CAACI,KAHC;AAIbC,IAAAA,OAAO,EAAEL,IAAI,CAACK;AAJD,GAAT,EAKLC,mBAAOC,UALF,EAKc;AAClBC,IAAAA,SAAS,EAAC;AADQ,GALd,CAAR;AASH,CAVD;;;;AAYA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAmB;AAC9B,MAAMC,KAAK,GAAGH,GAAG,CAACI,OAAJ,CAAYC,aAA1B;;AACA,MAAGF,KAAH,EAAU;AACN,QAAMG,SAAS,GAAGH,KAAK,CAACI,KAAN,CAAY,CAAZ,EAAeJ,KAAK,CAACK,MAArB,CAAlB;;AACAjB,6BAAIkB,MAAJ,CAAWH,SAAX,EAAsBV,mBAAOC,UAA7B,EAAyC,UAACa,GAAD,EAAMC,MAAN,EAAe;AACpD,UAAGD,GAAH,EACA;AACI,eAAOT,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,UAAAA,GAAG,EAAE;AAAN,SAArB,CAAP;AACH;;AACDd,MAAAA,GAAG,CAACV,IAAJ,GAAWqB,MAAX;AACAT,MAAAA,IAAI;AACJ;AACH,KARD;AASH,GAXD,MAaA;AACI,WAAOD,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,GAAG,EAAE;AAAN,KAArB,CAAP;AACH;AACJ,CAlBD;;;;AAoBA,IAAMnB,OAAO,GAAG,SAAVA,OAAU,CAACK,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAmB;AAC/B,MAAGF,GAAG,CAACV,IAAJ,KAAayB,QAAQ,CAACf,GAAG,CAACV,IAAJ,CAASK,OAAV,CAAR,IAA8B,CAA9B,IAAmCoB,QAAQ,CAACf,GAAG,CAACV,IAAJ,CAASK,OAAV,CAAR,IAA8B,CAA9E,CAAH,EAAoF;AAChF,WAAOO,IAAI,EAAX;AAEH,GAHD,MAKA;AACI,WAAOD,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,GAAG,EAAE;AAAN,KAArB,CAAP;AACH;AACJ,CATD;;;;AAWA,IAAME,YAAY,GAAG,SAAfA,YAAe,CAAChB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAmB;AACpC,MAAGF,GAAG,CAACV,IAAJ,IAAYyB,QAAQ,CAACf,GAAG,CAACV,IAAJ,CAASK,OAAV,CAAR,IAA8B,CAA7C,EAA+C;AAC3C,WAAOO,IAAI,EAAX;AAEH,GAHD,MAKA;AACI,WAAOD,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,GAAG,EAAE;AAAN,KAArB,CAAP;AACH;AACJ,CATD","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport config from './config';\r\n\r\nconst getToken = (user) => {\r\n    return (jwt.sign({\r\n        //_id: user._id,\r\n        username: user.username,\r\n        email: user.email,\r\n        isAdmin: user.isAdmin\r\n    }, config.JWT_SECRET, {\r\n        expiresIn:'2h'\r\n    }\r\n    ))\r\n}\r\n\r\nconst isAuth = (req, res, next) =>{\r\n    const token = req.headers.authorization;\r\n    if(token) {\r\n        const onlyToken = token.slice(7, token.length);\r\n        jwt.verify(onlyToken, config.JWT_SECRET, (err, decode)=>{\r\n            if(err)\r\n            {\r\n                return res.status(403).send({msg: 'Invalid Token.'});\r\n            }\r\n            req.user = decode;\r\n            next();\r\n            return\r\n        })\r\n    }\r\n    else\r\n    {\r\n        return res.status(401).send({msg: 'Token is not supplied.'});\r\n    }    \r\n}\r\n\r\nconst isAdmin = (req, res, next) =>{\r\n    if(req.user && (parseInt(req.user.isAdmin) == 1 || parseInt(req.user.isAdmin) == 2)){\r\n        return next();\r\n\r\n    }\r\n    else\r\n    {\r\n        return res.status(401).send({msg: ' Admin Token is not valid.'})\r\n    }\r\n}\r\n\r\nconst isSuperAdmin = (req, res, next) =>{\r\n    if(req.user && parseInt(req.user.isAdmin) == 2){\r\n        return next();\r\n\r\n    }\r\n    else\r\n    {\r\n        return res.status(401).send({msg: ' Admin Token is not valid.'})\r\n    }\r\n}\r\n    \r\n\r\nexport {getToken, isAuth, isAdmin, isSuperAdmin}"],"file":"util.js"}