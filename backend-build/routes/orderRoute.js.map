{"version":3,"sources":["../../backend/routes/orderRoute.js"],"names":["router","express","Router","post","isAuth","req","res","mysqlConnection","getConnection","err","connection","beginTransaction","sql","query","body","charger","name","subname","phoneNumber","country","district","city","address","postalCode","company","companyName","bussiness","doy","afm","email","result","fields","rollback","chargerAddress_id","address_id","shippingTo","shippingAddress_id","insertId","methods","typeOfPayment","paymentMethod","paymentMethodCost","sendingMethod","sendingMethodCost","comments","itemsCost","order_id","user","Date","username","commit","console","log","response","status","send","release","mapCartItems","cartItems","map","x","rObj","_id","model","quantity","mapCartItemsHistory","isAdmin","itemsPerPage","offset","resp","count","get","orderId","params","id","order","billingAddress","shippingAddress","products","put","dates","dateIndex","newStatus","proccessDate","delayDate","shippingDate","cancelDate","error","message","StatusIndex","shippingPrice","paymentType","street","product_id","itemscost"],"mappings":"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","sourcesContent":["import express from 'express';\r\nimport { getToken, isAuth, isAdmin } from '../util.js';\r\nimport mysqlConnection from '../connection';\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/insert_order_company_shippingTo\", isAuth, async (req, res) => {\r\n\r\n    mysqlConnection.getConnection(function (err, connection) {\r\n        connection.beginTransaction(function (err) {\r\n            if (err) { throw err; }\r\n            let sql = \"UPDATE addresses SET name=?, subname=?, phoneNumber=?,country=?, district=?, city=?, street=?, postalCode=?, companyName=?, bussiness=?, doy=?, afm=? WHERE user_id=?\";\r\n            connection.query(sql, [req.body.charger.name, req.body.charger.subname, req.body.charger.phoneNumber, req.body.charger.country,\r\n            req.body.charger.district, req.body.charger.city, req.body.charger.address, req.body.charger.postalCode,\r\n            req.body.company.companyName, req.body.company.bussiness, req.body.company.doy, req.body.company.afm, req.body.charger.email], function (err, result, fields) {\r\n                if (err) {\r\n                    connection.rollback(function () {\r\n                        throw err;\r\n                    });\r\n                }\r\n\r\n                let sql = \"Select address_id FROM addresses WHERE user_id=?\";\r\n                connection.query(sql, [req.body.charger.email], function (err, result, fields) {\r\n                    if (err) {\r\n                        connection.rollback(function () {\r\n                            throw err;\r\n                        });\r\n                    }\r\n\r\n                    const chargerAddress_id = result[0].address_id;\r\n\r\n                    sql = \"INSERT INTO addresses (name, subname, phoneNumber,country, district, city, street, postalCode) VALUES (?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                    connection.query(sql, [req.body.shippingTo.name, req.body.shippingTo.subname, req.body.shippingTo.phoneNumber, req.body.shippingTo.country,\r\n                    req.body.shippingTo.district, req.body.shippingTo.city, req.body.shippingTo.address, req.body.shippingTo.postalCode], function (err, result, fields) {\r\n                        if (err) {\r\n                            connection.rollback(function () {\r\n                                throw err;\r\n                            });\r\n                        }\r\n\r\n                        const shippingAddress_id = result.insertId;\r\n\r\n                        sql = \"INSERT INTO orders (user_email, billingAddress, shippingAddress, paymentType, paymentMethod, paymentMethodPrice, sendingMethod,shippingPrice, comments, itemsPrice, user_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                        connection.query(sql, [req.body.charger.email, chargerAddress_id, shippingAddress_id, req.body.methods.typeOfPayment,\r\n                        req.body.methods.paymentMethod, req.body.methods.paymentMethodCost, req.body.methods.sendingMethod, req.body.methods.sendingMethodCost, req.body.methods.comments, req.body.itemsCost, req.body.charger.email], function (err, result) {\r\n                            if (err) {\r\n                                connection.rollback(function () {\r\n                                    throw err;\r\n                                });\r\n                            }\r\n\r\n                            const order_id = result.insertId;\r\n\r\n                            sql = \"INSERT INTO orderSendingPaymentHistory (order_id, sendingMethod, paymentMethod, paymentType, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?, ?, ?)\";\r\n                            connection.query(sql, [order_id, req.body.methods.sendingMethod, req.body.methods.paymentMethod, req.body.methods.typeOfPayment, req.user.email, new Date], function (err, result, fields) {\r\n                                if (err) {\r\n                                    connection.rollback(function () {\r\n                                        throw err;\r\n                                    });\r\n                                }\r\n\r\n                                sql = \"INSERT INTO billingAddressHistory (order_id, companyName, bussiness, afm, doy, country, district, city, street, phoneNumber, postalCode, comments, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                                connection.query(sql, [order_id, req.body.company.companyName, req.body.company.bussiness, req.body.company.afm, req.body.company.doy, req.body.charger.country, req.body.charger.district,\r\n                                    req.body.charger.city, req.body.charger.address, req.body.charger.phoneNumber, req.body.charger.postalCode, req.body.charger.comments, req.user.username, new Date], function (err, result, fields) {\r\n                                        if (err) {\r\n                                            connection.rollback(function () {\r\n                                                throw err;\r\n                                            });\r\n                                        }\r\n\r\n                                        sql = \"INSERT INTO shippingAddressHistory (order_id, name, subname, country, district, city, street, phoneNumber, postalCode, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                                        connection.query(sql, [order_id, req.body.shippingTo.name, req.body.shippingTo.subname, req.body.shippingTo.country, req.body.shippingTo.district,\r\n                                            req.body.shippingTo.city, req.body.shippingTo.address, req.body.shippingTo.phoneNumber, req.body.shippingTo.postalCode, req.user.username, new Date], function (err, result, fields) {\r\n                                                if (err) {\r\n                                                    connection.rollback(function () {\r\n                                                        throw err;\r\n                                                    });\r\n                                                }\r\n\r\n                                                sql = \"INSERT INTO order_products (order_id, product_id, model, quantity, image_case) SELECT ?, cart.product_id, cart.model, cart.quantity, cart.image_case FROM cart WHERE user_email=?\";\r\n                                                connection.query(sql, [order_id, req.body.charger.email], function (err, result) {\r\n                                                    if (err) {\r\n                                                        connection.rollback(function () {\r\n                                                            throw err;\r\n                                                        });\r\n                                                    }\r\n\r\n                                                    sql = \"INSERT INTO orderProductHistory (order_id, product_id, model, quantity, image_case, UpdatedBy, UpdatedAt, actions) SELECT ?, cart.product_id, cart.model, cart.quantity, cart.image_case, ?, ?, ? FROM cart WHERE user_email=?\";\r\n                                                    connection.query(sql, [order_id, req.body.charger.email, new Date, \"Αρχική Παραγγελία\", req.body.charger.email], function (err, result) {\r\n                                                        if (err) {\r\n                                                            connection.rollback(function () {\r\n                                                                throw err;\r\n                                                            });\r\n                                                        }\r\n\r\n                                                        sql = \"DELETE FROM cart WHERE user_email=?\";\r\n                                                        connection.query(sql, [req.body.charger.email], function (err, result) {\r\n                                                            if (err) {\r\n                                                                connection.rollback(function () {\r\n                                                                    throw err;\r\n                                                                });\r\n                                                            }\r\n\r\n                                                            connection.commit(function (err) {\r\n                                                                if (err) {\r\n                                                                    connection.rollback(function () {\r\n                                                                        throw err;\r\n                                                                    });\r\n                                                                }\r\n                                                                console.log('Transaction Completed Successfully.');\r\n                                                                var response = { order_id }\r\n                                                                res.status(200).send(response);\r\n                                                            });\r\n                                                        });\r\n                                                    });\r\n                                                });\r\n                                            })\r\n                                    });\r\n                            });\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n            connection.release();\r\n            // Handle error after the release.\r\n            if (err) throw err;\r\n        });\r\n        /* End transaction */\r\n    });\r\n});\r\n\r\nrouter.post(\"/insert_no_user_order_company_shippingTo\", async (req, res) => {\r\n\r\n    mysqlConnection.getConnection(function (err, connection) {\r\n        connection.beginTransaction(function (err) {\r\n            if (err) { throw err; }\r\n            let sql = \"INSERT INTO addresses (user_email, name, subname, phoneNumber, country, district, city, street, postalCode, companyName, bussiness, afm, doy) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n            connection.query(sql, [req.body.charger.email, req.body.charger.name, req.body.charger.subname, req.body.charger.phoneNumber, req.body.charger.country,\r\n            req.body.charger.district, req.body.charger.city, req.body.charger.address, req.body.charger.postalCode,\r\n            req.body.company.companyName, req.body.company.bussiness, req.body.company.afm, req.body.company.doy], function (err, result, fields) {\r\n                if (err) {\r\n                    connection.rollback(function () {\r\n                        throw err;\r\n                    });\r\n                }\r\n\r\n                const chargerAddress_id = result.insertId;\r\n\r\n                sql = \"INSERT INTO addresses (name, subname, phoneNumber,country, district, city, street, postalCode) VALUES (?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                connection.query(sql, [req.body.shippingTo.name, req.body.shippingTo.subname, req.body.shippingTo.phoneNumber, req.body.shippingTo.country,\r\n                req.body.shippingTo.district, req.body.shippingTo.city, req.body.shippingTo.address, req.body.shippingTo.postalCode], function (err, result, fields) {\r\n                    if (err) {\r\n                        connection.rollback(function () {\r\n                            throw err;\r\n                        });\r\n                    }\r\n\r\n                    const shippingAddress_id = result.insertId;\r\n\r\n                    sql = \"INSERT INTO orders (user_email, billingAddress, shippingAddress, paymentType, paymentMethod, sendingMethod, comments, itemsPrice, paymentMethodPrice,shippingPrice ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                    connection.query(sql, [req.body.charger.email, chargerAddress_id, shippingAddress_id, req.body.methods.typeOfPayment,\r\n                    req.body.methods.paymentMethod, req.body.methods.sendingMethod, req.body.methods.comments,\r\n                    req.body.itemsCost, req.body.methods.paymentMethodCost, req.body.methods.sendingMethodCost], function (err, result) {\r\n                        if (err) {\r\n                            connection.rollback(function () {\r\n                                throw err;\r\n                            });\r\n                        }\r\n\r\n                        const order_id = result.insertId;\r\n\r\n                        sql = \"INSERT INTO orderSendingPaymentHistory (order_id, sendingMethod, paymentMethod, paymentType, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?, ?, ?)\";\r\n                        connection.query(sql, [order_id, req.body.methods.sendingMethod, req.body.methods.paymentMethod, req.body.methods.typeOfPayment, req.body.charger.email, new Date], function (err, result, fields) {\r\n                            if (err) {\r\n                                connection.rollback(function () {\r\n                                    throw err;\r\n                                });\r\n                            }\r\n\r\n                            sql = \"INSERT INTO billingAddressHistory (order_id, companyName, bussiness, afm, doy, country, district, city, street, phoneNumber, postalCode, comments, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                            connection.query(sql, [order_id, req.body.company.companyName, req.body.company.bussiness, req.body.company.afm, req.body.company.doy, req.body.charger.country, req.body.charger.district,\r\n                                req.body.charger.city, req.body.charger.address, req.body.charger.phoneNumber, req.body.charger.postalCode, req.body.charger.comments, req.body.charger.email, new Date], function (err, result, fields) {\r\n                                    if (err) {\r\n                                        connection.rollback(function () {\r\n                                            throw err;\r\n                                        });\r\n                                    }\r\n\r\n                                    sql = \"INSERT INTO shippingAddressHistory (order_id, name, subname, country, district, city, street, phoneNumber, postalCode, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                                    connection.query(sql, [order_id, req.body.shippingTo.name, req.body.shippingTo.subname, req.body.shippingTo.country, req.body.shippingTo.district,\r\n                                        req.body.shippingTo.city, req.body.shippingTo.address, req.body.shippingTo.phoneNumber, req.body.shippingTo.postalCode, req.body.charger.email, new Date], function (err, result, fields) {\r\n                                            if (err) {\r\n                                                connection.rollback(function () {\r\n                                                    throw err;\r\n                                                });\r\n                                            }\r\n\r\n                                            const mapCartItems = req.body.cartItems.map(x => {\r\n                                                let rObj = [];\r\n                                                rObj[0] = order_id;\r\n                                                rObj[1] = x._id;\r\n                                                rObj[2] = x.model;\r\n                                                rObj[3] = x.quantity;\r\n                                                return rObj\r\n                                            })\r\n\r\n                                            sql = \"INSERT INTO order_products (order_id,product_id,model,quantity) VALUES ?\"\r\n                                            connection.query(sql, [mapCartItems], function (err, result) {\r\n                                                if (err) {\r\n                                                    connection.rollback(function () {\r\n                                                        throw err;\r\n                                                    });\r\n                                                }\r\n\r\n                                                const mapCartItemsHistory = req.body.cartItems.map(x => {\r\n                                                    let rObj = [];\r\n                                                    rObj[0] = order_id;\r\n                                                    rObj[1] = x._id;\r\n                                                    rObj[2] = x.model;\r\n                                                    rObj[3] = x.quantity;\r\n                                                    rObj[4] = req.body.charger.email;\r\n                                                    rObj[5] = new Date;\r\n                                                    rObj[6] = \"Αρχική Παραγγελία\";\r\n                                                    return rObj\r\n                                                })\r\n\r\n                                                sql = \"INSERT INTO orderProductHistory (order_id, product_id, model, quantity, UpdatedBy, UpdatedAt, actions) VALUES ?\";\r\n                                                connection.query(sql, [mapCartItemsHistory], function (err, result) {\r\n                                                    if (err) {\r\n                                                        connection.rollback(function () {\r\n                                                            throw err;\r\n                                                        });\r\n                                                    }\r\n\r\n                                                    connection.commit(function (err) {\r\n                                                        if (err) {\r\n                                                            connection.rollback(function () {\r\n                                                                throw err;\r\n                                                            });\r\n                                                        }\r\n                                                        console.log('Transaction Completed Successfully.');\r\n                                                        var response = { order_id }\r\n                                                        res.status(200).send(response);\r\n                                                    });\r\n                                                });\r\n                                            });\r\n                                        })\r\n                                });\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n            connection.release();\r\n            // Handle error after the release.\r\n            if (err) throw err;\r\n        });\r\n        /* End transaction */\r\n    });\r\n});\r\n\r\nrouter.post(\"/insert_order_company\", isAuth, async (req, res) => {\r\n\r\n    mysqlConnection.getConnection(function (err, connection) {\r\n        connection.beginTransaction(function (err) {\r\n            if (err) { throw err; }\r\n            let sql = \"UPDATE addresses SET name=?, subname=?, phoneNumber=?, country=?, district=?, city=?, street=?, postalCode=?, companyName=?, bussiness=?, doy=?, afm=? WHERE user_id=?\";\r\n            connection.query(sql, [req.body.charger.name, req.body.charger.subname, req.body.charger.phoneNumber, req.body.charger.country,\r\n            req.body.charger.district, req.body.charger.city, req.body.charger.address, req.body.charger.postalCode,\r\n            req.body.company.companyName, req.body.company.bussiness, req.body.company.doy, req.body.company.afm, req.body.charger.email], function (err, result, fields) {\r\n                if (err) {\r\n                    connection.rollback(function () {\r\n                        throw err;\r\n                    });\r\n                }\r\n\r\n                let sql = \"Select address_id FROM addresses WHERE user_id=?\";\r\n                connection.query(sql, [req.body.charger.email], function (err, result, fields) {\r\n                    if (err) {\r\n                        connection.rollback(function () {\r\n                            throw err;\r\n                        });\r\n                    }\r\n\r\n                    const chargerAddress_id = result[0].address_id;\r\n\r\n                    sql = \"INSERT INTO orders (user_email, billingAddress, paymentType, paymentMethod, sendingMethod, comments, itemsPrice, paymentMethodPrice, shippingPrice, user_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                    connection.query(sql, [req.body.charger.email, chargerAddress_id, req.body.methods.typeOfPayment,\r\n                    req.body.methods.paymentMethod, req.body.methods.sendingMethod, req.body.methods.comments,\r\n                    req.body.itemsCost, req.body.methods.paymentMethodCost, req.body.methods.sendingMethodCost, req.body.charger.email], function (err, result) {\r\n                        if (err) {\r\n                            connection.rollback(function () {\r\n                                throw err;\r\n                            });\r\n                        }\r\n\r\n                        const order_id = result.insertId;\r\n\r\n                        sql = \"INSERT INTO orderSendingPaymentHistory (order_id, sendingMethod, paymentMethod, paymentType, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?, ?, ?)\";\r\n                        connection.query(sql, [order_id, req.body.methods.sendingMethod, req.body.methods.paymentMethod, req.body.methods.typeOfPayment, req.user.email, new Date], function (err, result, fields) {\r\n                            if (err) {\r\n                                connection.rollback(function () {\r\n                                    throw err;\r\n                                });\r\n                            }\r\n\r\n                            sql = \"INSERT INTO billingAddressHistory (order_id, companyName, bussiness, afm, doy, country, district, city, street, phoneNumber, postalCode, comments, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                            connection.query(sql, [order_id, req.body.company.companyName, req.body.company.bussiness, req.body.company.afm, req.body.company.doy, req.body.charger.country, req.body.charger.district,\r\n                                req.body.charger.city, req.body.charger.address, req.body.charger.phoneNumber, req.body.charger.postalCode, req.body.charger.comments, req.user.username, new Date], function (err, result, fields) {\r\n                                    if (err) {\r\n                                        connection.rollback(function () {\r\n                                            throw err;\r\n                                        });\r\n                                    }\r\n\r\n                                    sql = \"INSERT INTO order_products (order_id, product_id, model, quantity, image_case) SELECT ?, cart.product_id, cart.model, cart.quantity, cart.image_case FROM cart WHERE user_email=?\";\r\n                                    connection.query(sql, [order_id, req.body.charger.email], function (err, result) {\r\n                                        if (err) {\r\n                                            connection.rollback(function () {\r\n                                                throw err;\r\n                                            });\r\n                                        }\r\n\r\n                                        sql = \"INSERT INTO orderProductHistory (order_id, product_id, model, quantity, image_case, UpdatedBy, UpdatedAt, actions) SELECT ?, cart.product_id, cart.model, cart.quantity, cart.image_case, ?, ?, ? FROM cart WHERE user_email=?\";\r\n                                        connection.query(sql, [order_id, req.body.charger.email, new Date, \"Αρχική Παραγγελία\", req.body.charger.email], function (err, result) {\r\n                                            if (err) {\r\n                                                connection.rollback(function () {\r\n                                                    throw err;\r\n                                                });\r\n                                            }\r\n\r\n                                            sql = \"DELETE FROM cart WHERE user_email=?\";\r\n                                            connection.query(sql, [req.body.charger.email], function (err, result) {\r\n                                                if (err) {\r\n                                                    connection.rollback(function () {\r\n                                                        throw err;\r\n                                                    });\r\n                                                }\r\n\r\n                                                connection.commit(function (err) {\r\n                                                    if (err) {\r\n                                                        connection.rollback(function () {\r\n                                                            throw err;\r\n                                                        });\r\n                                                    }\r\n                                                    console.log('Transaction Completed Successfully.');\r\n                                                    var response = { order_id }\r\n                                                    res.status(200).send(response);\r\n                                                });\r\n                                            });\r\n                                        });\r\n                                    });\r\n                                });\r\n                        })\r\n                    });\r\n                });\r\n            });\r\n            connection.release();\r\n            // Handle error after the release.\r\n            if (err) throw err;\r\n        });\r\n        /* End transaction */\r\n    });\r\n});\r\n\r\nrouter.post(\"/insert_no_user_order_company\", async (req, res) => {\r\n    mysqlConnection.getConnection(function (err, connection) {\r\n        connection.beginTransaction(function (err) {\r\n            if (err) { throw err; }\r\n            let sql = \"INSERT INTO addresses (user_email, name, subname, phoneNumber,country, district, city, street, postalCode, companyName, bussiness, afm, doy) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n            connection.query(sql, [req.body.charger.email, req.body.charger.name, req.body.charger.subname, req.body.charger.phoneNumber, req.body.charger.country,\r\n            req.body.charger.district, req.body.charger.city, req.body.charger.address, req.body.charger.postalCode,\r\n            req.body.company.companyName, req.body.company.bussiness, req.body.company.afm, req.body.company.doy], function (err, result, fields) {\r\n                if (err) {\r\n                    connection.rollback(function () {\r\n                        throw err;\r\n                    });\r\n                }\r\n\r\n                const chargerAddress_id = result.insertId;\r\n\r\n                sql = \"INSERT INTO orders (user_email, billingAddress, paymentType, paymentMethod, sendingMethod, comments, itemsPrice, paymentMethodPrice, shippingPrice) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                connection.query(sql, [req.body.charger.email, chargerAddress_id, req.body.methods.typeOfPayment,\r\n                req.body.methods.paymentMethod, req.body.methods.sendingMethod, req.body.methods.comments,\r\n                req.body.itemsCost, req.body.methods.paymentMethodCost, req.body.methods.sendingMethodCost], function (err, result) {\r\n                    if (err) {\r\n                        connection.rollback(function () {\r\n                            throw err;\r\n                        });\r\n                    }\r\n\r\n                    const order_id = result.insertId;\r\n\r\n                    sql = \"INSERT INTO orderSendingPaymentHistory (order_id, sendingMethod, paymentMethod, paymentType, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?, ?, ?)\";\r\n                    connection.query(sql, [order_id, req.body.methods.sendingMethod, req.body.methods.paymentMethod, req.body.methods.typeOfPayment, req.body.charger.email, new Date], function (err, result, fields) {\r\n                        if (err) {\r\n                            connection.rollback(function () {\r\n                                throw err;\r\n                            });\r\n                        }\r\n\r\n                        sql = \"INSERT INTO billingAddressHistory (order_id, companyName, bussiness, afm, doy, country, district, city, street, phoneNumber, postalCode, comments, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                        connection.query(sql, [order_id, req.body.company.companyName, req.body.company.bussiness, req.body.company.afm, req.body.company.doy, req.body.charger.country, req.body.charger.district,\r\n                            req.body.charger.city, req.body.charger.address, req.body.charger.phoneNumber, req.body.charger.postalCode, req.body.charger.comments, req.body.charger.email, new Date], function (err, result, fields) {\r\n                                if (err) {\r\n                                    connection.rollback(function () {\r\n                                        throw err;\r\n                                    });\r\n                                }\r\n\r\n                                const mapCartItems = req.body.cartItems.map(x => {\r\n                                    let rObj = [];\r\n                                    rObj[0] = order_id;\r\n                                    rObj[1] = x._id;\r\n                                    rObj[2] = x.model;\r\n                                    rObj[3] = x.quantity;\r\n                                    return rObj\r\n                                })\r\n\r\n                                sql = \"INSERT INTO order_products (order_id,product_id,model,quantity) VALUES ?\"\r\n                                connection.query(sql, [mapCartItems], function (err, result) {\r\n                                    if (err) {\r\n                                        connection.rollback(function () {\r\n                                            throw err;\r\n                                        });\r\n                                    }\r\n\r\n                                    const mapCartItemsHistory = req.body.cartItems.map(x => {\r\n                                        let rObj = [];\r\n                                        rObj[0] = order_id;\r\n                                        rObj[1] = x._id;\r\n                                        rObj[2] = x.model;\r\n                                        rObj[3] = x.quantity;\r\n                                        rObj[4] = req.body.charger.email;\r\n                                        rObj[5] = new Date;\r\n                                        rObj[6] = \"Αρχική Παραγγελία\";\r\n                                        return rObj\r\n                                    })\r\n\r\n                                    sql = \"INSERT INTO orderProductHistory (order_id, product_id, model, quantity, UpdatedBy, UpdatedAt, actions) VALUES ?\";\r\n                                    connection.query(sql, [mapCartItemsHistory], function (err, result) {\r\n                                        if (err) {\r\n                                            connection.rollback(function () {\r\n                                                throw err;\r\n                                            });\r\n                                        }\r\n\r\n                                        connection.commit(function (err) {\r\n                                            if (err) {\r\n                                                connection.rollback(function () {\r\n                                                    throw err;\r\n                                                });\r\n                                            }\r\n                                            console.log('Transaction Completed Successfully.');\r\n                                            var response = { order_id }\r\n                                            res.status(200).send(response);\r\n                                        });\r\n                                    });\r\n                                });\r\n                            });\r\n                    })\r\n                });\r\n            });\r\n            connection.release();\r\n            // Handle error after the release.\r\n            if (err) throw err;\r\n        });\r\n        /* End transaction */\r\n    });\r\n});\r\n\r\nrouter.post(\"/insert_order_shippingTo\", isAuth, async (req, res) => {\r\n\r\n    mysqlConnection.getConnection(function (err, connection) {\r\n        connection.beginTransaction(function (err) {\r\n            if (err) { throw err; }\r\n            let sql = \"UPDATE addresses SET name=?, subname=?, phoneNumber=?,country=?, district=?, city=?, street=?, postalCode=? WHERE user_id=?\";\r\n            connection.query(sql, [req.body.charger.name, req.body.charger.subname, req.body.charger.phoneNumber, req.body.charger.country,\r\n            req.body.charger.district, req.body.charger.city, req.body.charger.address, req.body.charger.postalCode, req.body.charger.email], function (err, result, fields) {\r\n                if (err) {\r\n                    connection.rollback(function () {\r\n                        throw err;\r\n                    });\r\n                }\r\n\r\n                let sql = \"Select address_id FROM addresses WHERE user_id=?\";\r\n                connection.query(sql, [req.body.charger.email], function (err, result, fields) {\r\n                    if (err) {\r\n                        connection.rollback(function () {\r\n                            throw err;\r\n                        });\r\n                    }\r\n\r\n                    const chargerAddress_id = result[0].address_id;\r\n\r\n                    sql = \"INSERT INTO addresses (name, subname, phoneNumber,country, district, city, street, postalCode) VALUES (?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                    connection.query(sql, [req.body.shippingTo.name, req.body.shippingTo.subname, req.body.shippingTo.phoneNumber, req.body.shippingTo.country,\r\n                    req.body.shippingTo.district, req.body.shippingTo.city, req.body.shippingTo.address, req.body.shippingTo.postalCode], function (err, result, fields) {\r\n                        if (err) {\r\n                            connection.rollback(function () {\r\n                                throw err;\r\n                            });\r\n                        }\r\n\r\n                        const shippingAddress_id = result.insertId;\r\n\r\n                        sql = \"INSERT INTO orders (user_email, billingAddress, shippingAddress, paymentType, paymentMethod, sendingMethod, comments, itemsPrice, paymentMethodPrice, shippingPrice, user_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                        connection.query(sql, [req.body.charger.email, chargerAddress_id, shippingAddress_id, req.body.methods.typeOfPayment,\r\n                        req.body.methods.paymentMethod, req.body.methods.sendingMethod, req.body.methods.comments,\r\n                        req.body.itemsCost, req.body.methods.paymentMethodCost, req.body.methods.sendingMethodCost, req.body.charger.email], function (err, result) {\r\n                            if (err) {\r\n                                connection.rollback(function () {\r\n                                    throw err;\r\n                                });\r\n                            }\r\n\r\n                            const order_id = result.insertId;\r\n\r\n                            sql = \"INSERT INTO orderSendingPaymentHistory (order_id, sendingMethod, paymentMethod, paymentType, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?, ?, ?)\";\r\n                            connection.query(sql, [order_id, req.body.methods.sendingMethod, req.body.methods.paymentMethod, req.body.methods.typeOfPayment, req.user.email, new Date], function (err, result, fields) {\r\n                                if (err) {\r\n                                    connection.rollback(function () {\r\n                                        throw err;\r\n                                    });\r\n                                }\r\n\r\n                                sql = \"INSERT INTO billingAddressHistory (order_id, name, subname, country, district, city, street, phoneNumber, postalCode, comments, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                                connection.query(sql, [order_id, req.body.charger.name, req.body.charger.subname, req.body.charger.country, req.body.charger.district,\r\n                                    req.body.charger.city, req.body.charger.address, req.body.charger.phoneNumber, req.body.charger.postalCode, req.body.methods.comments, req.body.charger.email, new Date], function (err, result, fields) {\r\n                                        if (err) {\r\n                                            connection.rollback(function () {\r\n                                                throw err;\r\n                                            });\r\n                                        }\r\n\r\n                                        sql = \"INSERT INTO shippingAddressHistory (order_id, name, subname, country, district, city, street, phoneNumber, postalCode, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                                        connection.query(sql, [order_id, req.body.shippingTo.name, req.body.shippingTo.subname, req.body.shippingTo.country, req.body.shippingTo.district,\r\n                                            req.body.shippingTo.city, req.body.shippingTo.address, req.body.shippingTo.phoneNumber, req.body.shippingTo.postalCode, req.user.username, new Date], function (err, result, fields) {\r\n                                                if (err) {\r\n                                                    connection.rollback(function () {\r\n                                                        throw err;\r\n                                                    });\r\n                                                }\r\n\r\n                                                sql = \"INSERT INTO order_products (order_id, product_id, model, quantity, image_case) SELECT ?, cart.product_id, cart.model, cart.quantity, cart.image_case FROM cart WHERE user_email=?\";\r\n                                                connection.query(sql, [order_id, req.body.charger.email], function (err, result) {\r\n                                                    if (err) {\r\n                                                        connection.rollback(function () {\r\n                                                            throw err;\r\n                                                        });\r\n                                                    }\r\n\r\n                                                    sql = \"INSERT INTO orderProductHistory (order_id, product_id, model, quantity, image_case, UpdatedBy, UpdatedAt, actions) SELECT ?, cart.product_id, cart.model, cart.quantity, cart.image_case, ?, ?, ? FROM cart WHERE user_email=?\";\r\n                                                    connection.query(sql, [order_id, req.body.charger.email, new Date, \"Αρχική Παραγγελία\", req.body.charger.email], function (err, result) {\r\n                                                        if (err) {\r\n                                                            connection.rollback(function () {\r\n                                                                throw err;\r\n                                                            });\r\n                                                        }\r\n\r\n                                                        sql = \"DELETE FROM cart WHERE user_email=?\";\r\n                                                        connection.query(sql, [req.body.charger.email], function (err, result) {\r\n                                                            if (err) {\r\n                                                                connection.rollback(function () {\r\n                                                                    throw err;\r\n                                                                });\r\n                                                            }\r\n\r\n                                                            connection.commit(function (err) {\r\n                                                                if (err) {\r\n                                                                    connection.rollback(function () {\r\n                                                                        throw err;\r\n                                                                    });\r\n                                                                }\r\n                                                                console.log('Transaction Completed Successfully.');\r\n                                                                var response = { order_id }\r\n                                                                res.status(200).send(response);\r\n                                                            });\r\n                                                        });\r\n                                                    });\r\n                                                });\r\n                                            })\r\n                                    })\r\n                            })\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n            connection.release();\r\n            // Handle error after the release.\r\n            if (err) throw err;\r\n        });\r\n        /* End transaction */\r\n    });\r\n});\r\n\r\nrouter.post(\"/insert_no_user_order_shippingTo\", async (req, res) => {\r\n\r\n    mysqlConnection.getConnection(function (err, connection) {\r\n        connection.beginTransaction(function (err) {\r\n            if (err) { throw err; }\r\n            let sql = \"INSERT INTO addresses (user_email, name, subname, phoneNumber,country, district, city, street, postalCode) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n            connection.query(sql, [req.body.charger.email, req.body.charger.name, req.body.charger.subname, req.body.charger.phoneNumber, req.body.charger.country,\r\n            req.body.charger.district, req.body.charger.city, req.body.charger.address, req.body.charger.postalCode], function (err, result, fields) {\r\n                if (err) {\r\n                    connection.rollback(function () {\r\n                        throw err;\r\n                    });\r\n                }\r\n\r\n                const chargerAddress_id = result.insertId;\r\n\r\n                sql = \"INSERT INTO addresses (name, subname, phoneNumber,country, district, city, street, postalCode) VALUES (?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                connection.query(sql, [req.body.shippingTo.name, req.body.shippingTo.subname, req.body.shippingTo.phoneNumber, req.body.shippingTo.country,\r\n                req.body.shippingTo.district, req.body.shippingTo.city, req.body.shippingTo.address, req.body.shippingTo.postalCode], function (err, result, fields) {\r\n                    if (err) {\r\n                        connection.rollback(function () {\r\n                            throw err;\r\n                        });\r\n                    }\r\n\r\n                    const shippingAddress_id = result.insertId;\r\n\r\n                    sql = \"INSERT INTO orders (user_email, billingAddress, shippingAddress, paymentType, paymentMethod, sendingMethod, comments, itemsPrice, paymentMethodPrice, shippingPrice) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                    connection.query(sql, [req.body.charger.email, chargerAddress_id, shippingAddress_id, req.body.methods.typeOfPayment,\r\n                    req.body.methods.paymentMethod, req.body.methods.sendingMethod, req.body.methods.comments,\r\n                    req.body.itemsCost, req.body.methods.paymentMethodCost, req.body.methods.sendingMethodCost], function (err, result) {\r\n                        if (err) {\r\n                            connection.rollback(function () {\r\n                                throw err;\r\n                            });\r\n                        }\r\n\r\n                        const order_id = result.insertId;\r\n\r\n                        sql = \"INSERT INTO orderSendingPaymentHistory (order_id, sendingMethod, paymentMethod, paymentType, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?, ?, ?)\";\r\n                        connection.query(sql, [order_id, req.body.methods.sendingMethod, req.body.methods.paymentMethod, req.body.methods.typeOfPayment, req.body.charger.email, new Date], function (err, result, fields) {\r\n                            if (err) {\r\n                                connection.rollback(function () {\r\n                                    throw err;\r\n                                });\r\n                            }\r\n\r\n                            sql = \"INSERT INTO billingAddressHistory (order_id, name, subname, country, district, city, street, phoneNumber, postalCode, comments, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                            connection.query(sql, [order_id, req.body.charger.name, req.body.charger.subname, req.body.charger.country, req.body.charger.district,\r\n                                req.body.charger.city, req.body.charger.address, req.body.charger.phoneNumber, req.body.charger.postalCode, req.body.methods.comments, req.body.charger.email, new Date], function (err, result, fields) {\r\n                                    if (err) {\r\n                                        connection.rollback(function () {\r\n                                            throw err;\r\n                                        });\r\n                                    }\r\n\r\n                                    sql = \"INSERT INTO shippingAddressHistory (order_id, name, subname, country, district, city, street, phoneNumber, postalCode, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                                    connection.query(sql, [order_id, req.body.shippingTo.name, req.body.shippingTo.subname, req.body.shippingTo.country, req.body.shippingTo.district,\r\n                                        req.body.shippingTo.city, req.body.shippingTo.address, req.body.shippingTo.phoneNumber, req.body.shippingTo.postalCode, req.body.charger.email, new Date], function (err, result, fields) {\r\n                                            if (err) {\r\n                                                connection.rollback(function () {\r\n                                                    throw err;\r\n                                                });\r\n                                            }\r\n\r\n                                            const mapCartItems = req.body.cartItems.map(x => {\r\n                                                let rObj = [];\r\n                                                rObj[0] = order_id;\r\n                                                rObj[1] = x._id;\r\n                                                rObj[2] = x.model;\r\n                                                rObj[3] = x.quantity;\r\n                                                return rObj\r\n                                            }\r\n                                            )\r\n\r\n                                            sql = \"INSERT INTO order_products (order_id,product_id,model,quantity) VALUES ?\"\r\n                                            connection.query(sql, [mapCartItems], function (err, result) {\r\n                                                if (err) {\r\n                                                    connection.rollback(function () {\r\n                                                        throw err;\r\n                                                    });\r\n                                                }\r\n\r\n                                                const mapCartItemsHistory = req.body.cartItems.map(x => {\r\n                                                    let rObj = [];\r\n                                                    rObj[0] = order_id;\r\n                                                    rObj[1] = x._id;\r\n                                                    rObj[2] = x.model;\r\n                                                    rObj[3] = x.quantity;\r\n                                                    rObj[4] = req.body.charger.email;\r\n                                                    rObj[5] = new Date;\r\n                                                    rObj[6] = \"Αρχική Παραγγελία\";\r\n                                                    return rObj\r\n                                                })\r\n\r\n                                                sql = \"INSERT INTO orderProductHistory (order_id, product_id, model, quantity, UpdatedBy, UpdatedAt, actions) VALUES ?\";\r\n                                                connection.query(sql, [mapCartItemsHistory], function (err, result) {\r\n                                                    if (err) {\r\n                                                        connection.rollback(function () {\r\n                                                            throw err;\r\n                                                        });\r\n                                                    }\r\n\r\n                                                    connection.commit(function (err) {\r\n                                                        if (err) {\r\n                                                            connection.rollback(function () {\r\n                                                                throw err;\r\n                                                            });\r\n                                                        }\r\n                                                        console.log('Transaction Completed Successfully.');\r\n                                                        var response = { order_id }\r\n                                                        res.status(200).send(response);\r\n                                                    });\r\n                                                });\r\n                                            });\r\n                                        })\r\n                                });\r\n                        })\r\n                    });\r\n                });\r\n            });\r\n            connection.release();\r\n            // Handle error after the release.\r\n            if (err) throw err;\r\n        });\r\n        /* End transaction */\r\n    });\r\n})\r\n\r\nrouter.post(\"/insert_order\", isAuth, async (req, res) => {\r\n\r\n    mysqlConnection.getConnection(function (err, connection) {\r\n        connection.beginTransaction(function (err) {\r\n            if (err) { throw err; }\r\n            let sql = \"UPDATE addresses SET name=?, subname=?, phoneNumber=?,country=?, district=?, city=?, street=?, postalCode=? WHERE user_id=?\";\r\n            connection.query(sql, [req.body.charger.name, req.body.charger.subname, req.body.charger.phoneNumber, req.body.charger.country,\r\n            req.body.charger.district, req.body.charger.city, req.body.charger.address, req.body.charger.postalCode, req.body.charger.email], function (err, result, fields) {\r\n                if (err) {\r\n                    connection.rollback(function () {\r\n                        throw err;\r\n                    });\r\n                }\r\n\r\n                let sql = \"Select address_id FROM addresses WHERE user_id=?\";\r\n                connection.query(sql, [req.body.charger.email], function (err, result, fields) {\r\n                    if (err) {\r\n                        connection.rollback(function () {\r\n                            throw err;\r\n                        });\r\n                    }\r\n\r\n                    const chargerAddress_id = result[0].address_id;\r\n\r\n                    sql = \"INSERT INTO orders (user_email, billingAddress, paymentType, paymentMethod, sendingMethod, comments, itemsPrice, paymentMethodPrice, shippingPrice, user_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                    connection.query(sql, [req.body.charger.email, chargerAddress_id, req.body.methods.typeOfPayment,\r\n                    req.body.methods.paymentMethod, req.body.methods.sendingMethod, req.body.methods.comments,\r\n                    req.body.itemsCost, req.body.methods.paymentMethodCost, req.body.methods.sendingMethodCost, req.body.charger.email], function (err, result) {\r\n                        if (err) {\r\n                            connection.rollback(function () {\r\n                                throw err;\r\n                            });\r\n                        }\r\n\r\n                        const order_id = result.insertId;\r\n\r\n                        sql = \"INSERT INTO orderSendingPaymentHistory (order_id, sendingMethod, paymentMethod, paymentType, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?, ?, ?)\";\r\n                        connection.query(sql, [order_id, req.body.methods.sendingMethod, req.body.methods.paymentMethod, req.body.methods.typeOfPayment, req.user.email, new Date], function (err, result, fields) {\r\n                            if (err) {\r\n                                connection.rollback(function () {\r\n                                    throw err;\r\n                                });\r\n                            }\r\n\r\n                            sql = \"INSERT INTO billingAddressHistory (order_id, name, subname, country, district, city, street, phoneNumber, postalCode, comments, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                            connection.query(sql, [order_id, req.body.charger.name, req.body.charger.subname, req.body.charger.country, req.body.charger.district,\r\n                                req.body.charger.city, req.body.charger.address, req.body.charger.phoneNumber, req.body.charger.postalCode, req.body.methods.comments, req.body.charger.email, new Date], function (err, result, fields) {\r\n                                    if (err) {\r\n                                        connection.rollback(function () {\r\n                                            throw err;\r\n                                        });\r\n                                    }\r\n\r\n                                    sql = \"INSERT INTO order_products (order_id, product_id, model, quantity, image_case) SELECT ?, cart.product_id, cart.model, cart.quantity, cart.image_case FROM cart WHERE user_email=?\";\r\n                                    connection.query(sql, [order_id, req.body.charger.email], function (err, result) {\r\n                                        if (err) {\r\n                                            connection.rollback(function () {\r\n                                                throw err;\r\n                                            });\r\n                                        }\r\n\r\n                                        sql = \"INSERT INTO orderProductHistory (order_id, product_id, model, quantity, image_case, UpdatedBy, UpdatedAt, actions) SELECT ?, cart.product_id, cart.model, cart.quantity, cart.image_case, ?, ?, ? FROM cart WHERE user_email=?\";\r\n                                        connection.query(sql, [order_id, req.body.charger.email, new Date, \"Αρχική Παραγγελία\", req.body.charger.email], function (err, result) {\r\n                                            if (err) {\r\n                                                connection.rollback(function () {\r\n                                                    throw err;\r\n                                                });\r\n                                            }\r\n\r\n                                            sql = \"DELETE FROM cart WHERE user_email=?\";\r\n                                            connection.query(sql, [req.body.charger.email], function (err, result) {\r\n                                                if (err) {\r\n                                                    connection.rollback(function () {\r\n                                                        throw err;\r\n                                                    });\r\n                                                }\r\n\r\n                                                connection.commit(function (err) {\r\n                                                    if (err) {\r\n                                                        connection.rollback(function () {\r\n                                                            throw err;\r\n                                                        });\r\n                                                    }\r\n                                                    console.log('Transaction Completed Successfully.');\r\n                                                    var response = { order_id }\r\n                                                    res.status(200).send(response);\r\n\r\n                                                });\r\n                                            });\r\n                                        });\r\n                                    });\r\n                                });\r\n                        })\r\n                    });\r\n                });\r\n            });\r\n            connection.release();\r\n            // Handle error after the release.\r\n            if (err) throw err;\r\n        });\r\n        /* End transaction */\r\n    });\r\n});\r\n\r\nrouter.post(\"/insert_no_user_order\", async (req, res) => {\r\n\r\n    mysqlConnection.getConnection(function (err, connection) {\r\n        connection.beginTransaction(function (err) {\r\n            if (err) { throw err; }\r\n            let sql = \"INSERT INTO addresses (user_email, name, subname, phoneNumber,country, district, city, street, postalCode) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n            connection.query(sql, [req.body.charger.email, req.body.charger.name, req.body.charger.subname, req.body.charger.phoneNumber, req.body.charger.country,\r\n            req.body.charger.district, req.body.charger.city, req.body.charger.address, req.body.charger.postalCode], function (err, result, fields) {\r\n                if (err) {\r\n                    connection.rollback(function () {\r\n                        throw err;\r\n                    });\r\n                }\r\n\r\n                const chargerAddress_id = result.insertId;\r\n\r\n                sql = \"INSERT INTO orders (user_email, billingAddress, paymentType, paymentMethod, sendingMethod, comments, itemsPrice, paymentMethodPrice, shippingPrice) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                connection.query(sql, [req.body.charger.email, chargerAddress_id, req.body.methods.typeOfPayment,\r\n                req.body.methods.paymentMethod, req.body.methods.sendingMethod, req.body.methods.comments,\r\n                req.body.itemsCost, req.body.methods.paymentMethodCost, req.body.methods.sendingMethodCost], function (err, result) {\r\n                    if (err) {\r\n                        connection.rollback(function () {\r\n                            throw err;\r\n                        });\r\n                    }\r\n\r\n                    const order_id = result.insertId;\r\n\r\n                    sql = \"INSERT INTO orderSendingPaymentHistory (order_id, sendingMethod, paymentMethod, paymentType, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?, ?, ?)\";\r\n                    connection.query(sql, [order_id, req.body.methods.sendingMethod, req.body.methods.paymentMethod, req.body.methods.typeOfPayment, req.body.charger.email, new Date], function (err, result, fields) {\r\n                        if (err) {\r\n                            connection.rollback(function () {\r\n                                throw err;\r\n                            });\r\n                        }\r\n\r\n                        sql = \"INSERT INTO billingAddressHistory (order_id, name, subname, country, district, city, street, phoneNumber, postalCode, comments, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                        connection.query(sql, [order_id, req.body.charger.name, req.body.charger.subname, req.body.charger.country, req.body.charger.district,\r\n                            req.body.charger.city, req.body.charger.address, req.body.charger.phoneNumber, req.body.charger.postalCode, req.body.methods.comments, req.body.charger.email, new Date], function (err, result, fields) {\r\n                                if (err) {\r\n                                    connection.rollback(function () {\r\n                                        throw err;\r\n                                    });\r\n                                }\r\n\r\n                                const mapCartItems = req.body.cartItems.map(x => {\r\n                                    let rObj = [];\r\n                                    rObj[0] = order_id;\r\n                                    rObj[1] = x._id;\r\n                                    rObj[2] = x.model;\r\n                                    rObj[3] = x.quantity;\r\n                                    return rObj\r\n                                }\r\n                                )\r\n\r\n                                sql = \"INSERT INTO order_products (order_id,product_id,model,quantity) VALUES ?\"\r\n                                connection.query(sql, [mapCartItems], function (err, result) {\r\n                                    if (err) {\r\n                                        connection.rollback(function () {\r\n                                            throw err;\r\n                                        });\r\n                                    }\r\n\r\n                                    const mapCartItemsHistory = req.body.cartItems.map(x => {\r\n                                        let rObj = [];\r\n                                        rObj[0] = order_id;\r\n                                        rObj[1] = x._id;\r\n                                        rObj[2] = x.model;\r\n                                        rObj[3] = x.quantity;\r\n                                        rObj[4] = req.body.charger.email;\r\n                                        rObj[5] = new Date;\r\n                                        rObj[6] = \"Αρχική Παραγγελία\";\r\n                                        return rObj\r\n                                    })\r\n\r\n                                    sql = \"INSERT INTO orderProductHistory (order_id, product_id, model, quantity, UpdatedBy, UpdatedAt, actions) VALUES ?\";\r\n                                    connection.query(sql, [mapCartItemsHistory], function (err, result) {\r\n                                        if (err) {\r\n                                            connection.rollback(function () {\r\n                                                throw err;\r\n                                            });\r\n                                        }\r\n\r\n                                        connection.commit(function (err) {\r\n                                            if (err) {\r\n                                                connection.rollback(function () {\r\n                                                    throw err;\r\n                                                });\r\n                                            }\r\n                                            console.log('Transaction Completed Successfully.');\r\n                                            var response = { order_id }\r\n                                            res.status(200).send(response);\r\n\r\n                                        });\r\n                                    });\r\n                                });\r\n                            })\r\n                    })\r\n                });\r\n            });\r\n        });\r\n        connection.release();\r\n        // Handle error after the release.\r\n        if (err) throw err;\r\n        /* End transaction */\r\n    });\r\n});\r\n\r\nrouter.post(\"/\", isAuth, isAdmin, async (req, res) => {\r\n    mysqlConnection.getConnection(function (err, connection) {\r\n        if (err) throw err; // not connected!\r\n\r\n        let sql = \"\"\r\n        if (req.body.status === \"Όλες\") {\r\n            sql = \"SELECT * FROM orders ORDER BY orderDate DESC LIMIT ? OFFSET ?\";\r\n            connection.query(sql, [req.body.itemsPerPage, req.body.offset], function (err, result) {\r\n                if (err) throw err;\r\n                let resp = result;\r\n\r\n                connection.query('SELECT COUNT(*) AS count FROM orders',\r\n                    function (err, result, fields) {\r\n                        if (err) throw err;\r\n                        let count = result;\r\n\r\n                        res.send({ resp, count });\r\n                    })\r\n            });\r\n        }\r\n        else {\r\n            sql = \"SELECT * FROM orders WHERE status=? ORDER BY orderDate DESC LIMIT ? OFFSET ?\";\r\n            connection.query(sql, [req.body.status, req.body.itemsPerPage, req.body.offset], function (err, result) {\r\n                if (err) throw err;\r\n\r\n                let resp = result;\r\n\r\n                connection.query('SELECT COUNT(*) AS count FROM orders WHERE status=?',\r\n                    [req.body.status], function (err, result, fields) {\r\n                        if (err) throw err;\r\n                        let count = result;\r\n\r\n                        res.send({ resp, count });\r\n                    })\r\n            });\r\n        }\r\n\r\n        connection.release();\r\n\r\n        // Handle error after the release.\r\n        if (err) throw err;\r\n    });\r\n});\r\n\r\nrouter.get(\"/:id\", isAuth, isAdmin, async (req, res) => {\r\n    const orderId = req.params.id;\r\n    mysqlConnection.getConnection(function (err, connection) {\r\n        if (err) throw err; // not connected!\r\n        /* Begin transaction */\r\n        connection.beginTransaction(function (err) {\r\n            if (err) { throw err; }\r\n\r\n            let sql = \"SELECT * FROM orders WHERE order_id=?\";\r\n            connection.query(sql, [orderId], function (err, result) {\r\n                if (err) {\r\n                    connection.rollback(function () {\r\n                        throw err;\r\n                    });\r\n                }\r\n\r\n                const order = result[0];\r\n\r\n                sql = \"SELECT addresses.* FROM addresses INNER JOIN orders ON addresses.address_id = orders.billingAddress WHERE orders.order_id=?\";\r\n                connection.query(sql, [orderId], function (err, result) {\r\n                    if (err) {\r\n                        connection.rollback(function () {\r\n                            throw err;\r\n                        });\r\n                    }\r\n\r\n                    var billingAddress = result[0];\r\n\r\n                    sql = \"SELECT addresses.* FROM addresses INNER JOIN orders ON addresses.address_id = orders.shippingAddress WHERE orders.order_id=?\";\r\n                    connection.query(sql, [orderId], function (err, result) {\r\n                        if (err) {\r\n                            connection.rollback(function () {\r\n                                throw err;\r\n                            });\r\n                        }\r\n\r\n                        var shippingAddress = result[0];\r\n\r\n                        sql = \"SELECT products._id, products.name, products.image, products.category,products.subcategory, products.totalPrice, products.countInStock, order_products.quantity, order_products.model, order_products.image_case FROM products INNER JOIN order_products ON products._id = order_products.product_id WHERE order_products.order_id=?\";\r\n                        connection.query(sql, [orderId], function (err, result) {\r\n                            if (err) {\r\n                                connection.rollback(function () {\r\n                                    throw err;\r\n                                });\r\n                            }\r\n\r\n                            var products = result;\r\n\r\n                            var response = {\r\n                                order,\r\n                                billingAddress,\r\n                                shippingAddress,\r\n                                products\r\n                            };\r\n                            res.send(response);\r\n\r\n\r\n                            connection.commit(function (err) {\r\n                                if (err) {\r\n                                    connection.rollback(function () {\r\n                                        throw err;\r\n                                    });\r\n                                }\r\n                                console.log('Transaction Completed Successfully.');\r\n                                connection.release();\r\n                            });\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        });\r\n        /* End transaction */\r\n\r\n        // Handle error after the release.\r\n        if (err) throw err;\r\n    });\r\n});\r\n\r\nrouter.put(\"/changeStatus\", isAuth, isAdmin, async (req, res) => {\r\n\r\n    try {\r\n        mysqlConnection.getConnection(function (err, connection) {\r\n            if (err) throw err; // not connected!\r\n            switch (req.body.dates.dateIndex) {\r\n                case 0:\r\n                    connection.beginTransaction(function (err) {\r\n                        var sql = \"UPDATE orders SET status=?, proccessDate=?, delayDate=?, shippingDate=?, cancelDate=? WHERE order_id=?\";\r\n                        connection.query(sql, [req.body.newStatus, req.body.dates.proccessDate, req.body.dates.delayDate,\r\n                        req.body.dates.shippingDate, req.body.dates.cancelDate, req.body.orderId], function (err, result, fields) {\r\n                            if (err) {\r\n                                connection.rollback(function () {\r\n                                    throw err;\r\n                                });\r\n                            }\r\n\r\n                            var sql = \"INSERT INTO orderStatusHistory (order_id, status, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?)\";\r\n                            connection.query(sql, [req.body.orderId, req.body.newStatus, req.user.username, new Date], function (err, result, fields) {\r\n                                if (err) {\r\n                                    connection.rollback(function () {\r\n                                        throw err;\r\n                                    });\r\n                                }\r\n\r\n                                connection.commit(function (err) {\r\n                                    if (err) {\r\n                                        connection.rollback(function () {\r\n                                            throw err;\r\n                                        });\r\n                                    }\r\n                                    console.log(\"Order Status updated\");\r\n                                    res.status(200).send(\"OK\");\r\n                                });\r\n                            })\r\n                        })\r\n                        connection.release();\r\n\r\n                        // Handle error after the release.\r\n                        if (err) throw err;\r\n                    })\r\n                    break;\r\n                case 1:\r\n                    connection.beginTransaction(function (err) {\r\n                        var sql = \"UPDATE orders SET status=?, delayDate=?, shippingDate=?, cancelDate=? WHERE order_id=?\";\r\n                        connection.query(sql, [req.body.newStatus, req.body.dates.delayDate,\r\n                        req.body.dates.shippingDate, req.body.dates.cancelDate, req.body.orderId], function (err, result, fields) {\r\n                            if (err) {\r\n                                connection.rollback(function () {\r\n                                    throw err;\r\n                                });\r\n                            }\r\n\r\n                            var sql = \"INSERT INTO orderStatusHistory (order_id, status, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?)\";\r\n                            connection.query(sql, [req.body.orderId, req.body.newStatus, req.user.username, new Date], function (err, result, fields) {\r\n                                if (err) {\r\n                                    connection.rollback(function () {\r\n                                        throw err;\r\n                                    });\r\n                                }\r\n\r\n                                connection.commit(function (err) {\r\n                                    if (err) {\r\n                                        connection.rollback(function () {\r\n                                            throw err;\r\n                                        });\r\n                                    }\r\n                                    console.log(\"Order Status updated\");\r\n                                    res.status(200).send(\"OK\");\r\n                                });\r\n                            })\r\n                        })\r\n                        connection.release();\r\n\r\n                        // Handle error after the release.\r\n                        if (err) throw err;\r\n                    })\r\n                    break;\r\n                case 2:\r\n                    connection.beginTransaction(function (err) {\r\n                        var sql = \"UPDATE orders SET status=?, shippingDate=?, cancelDate=? WHERE order_id=?\";\r\n                        connection.query(sql, [req.body.newStatus, req.body.dates.shippingDate,\r\n                        req.body.dates.cancelDate, req.body.orderId], function (err, result, fields) {\r\n                            if (err) {\r\n                                connection.rollback(function () {\r\n                                    throw err;\r\n                                });\r\n                            }\r\n\r\n                            var sql = \"INSERT INTO orderStatusHistory (order_id, status, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?)\";\r\n                            connection.query(sql, [req.body.orderId, req.body.newStatus, req.user.username, new Date], function (err, result, fields) {\r\n                                if (err) {\r\n                                    connection.rollback(function () {\r\n                                        throw err;\r\n                                    });\r\n                                }\r\n\r\n                                connection.commit(function (err) {\r\n                                    if (err) {\r\n                                        connection.rollback(function () {\r\n                                            throw err;\r\n                                        });\r\n                                    }\r\n                                    console.log(\"Order Status updated\");\r\n                                    res.status(200).send(\"OK\");\r\n                                });\r\n                            })\r\n                        })\r\n                        connection.release();\r\n\r\n                        // Handle error after the release.\r\n                        if (err) throw err;\r\n                    })\r\n                    break;\r\n                case 3:\r\n                    connection.beginTransaction(function (err) {\r\n                        var sql = \"UPDATE orders SET status=?, cancelDate=? WHERE order_id=?\";\r\n                        connection.query(sql, [req.body.newStatus, req.body.dates.cancelDate, req.body.orderId], function (err, result, fields) {\r\n                            if (err) {\r\n                                connection.rollback(function () {\r\n                                    throw err;\r\n                                });\r\n                            }\r\n\r\n                            var sql = \"INSERT INTO orderStatusHistory (order_id, status, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?)\";\r\n                            connection.query(sql, [req.body.orderId, req.body.newStatus, req.user.username, new Date], function (err, result, fields) {\r\n                                if (err) {\r\n                                    connection.rollback(function () {\r\n                                        throw err;\r\n                                    });\r\n                                }\r\n\r\n                                connection.commit(function (err) {\r\n                                    if (err) {\r\n                                        connection.rollback(function () {\r\n                                            throw err;\r\n                                        });\r\n                                    }\r\n                                    console.log(\"Order Status updated\");\r\n                                    res.status(200).send(\"OK\");\r\n                                });\r\n                            })\r\n                        })\r\n                        connection.release();\r\n\r\n                        // Handle error after the release.\r\n                        if (err) throw err;\r\n                    })\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n    catch (error) {\r\n        res.send({ message: error.message });\r\n    }\r\n});\r\n\r\nrouter.put(\"/updateStatus\", isAuth, isAdmin, async (req, res) => {\r\n\r\n    try {\r\n        mysqlConnection.getConnection(function (err, connection) {\r\n            if (err) throw err; // not connected!\r\n\r\n            switch (req.body.StatusIndex) {\r\n                case 1:\r\n                    connection.beginTransaction(function (err) {\r\n                        var sql = \"UPDATE orders SET status=?, proccessDate=? WHERE order_id=?\";\r\n                        connection.query(sql, [req.body.newStatus, new Date, req.body.orderId], function (err, result, fields) {\r\n                            if (err) {\r\n                                connection.rollback(function () {\r\n                                    throw err;\r\n                                });\r\n                            }\r\n\r\n                            var sql = \"INSERT INTO orderStatusHistory (order_id, status, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?)\";\r\n                            connection.query(sql, [req.body.orderId, req.body.newStatus, req.user.username, new Date], function (err, result, fields) {\r\n                                if (err) {\r\n                                    connection.rollback(function () {\r\n                                        throw err;\r\n                                    });\r\n                                }\r\n\r\n                                connection.commit(function (err) {\r\n                                    if (err) {\r\n                                        connection.rollback(function () {\r\n                                            throw err;\r\n                                        });\r\n                                    }\r\n                                    console.log(\"Order Status updated\");\r\n                                    res.status(200).send(\"OK\");\r\n                                });\r\n                            })\r\n                        })\r\n                        connection.release();\r\n\r\n                        // Handle error after the release.\r\n                        if (err) throw err;\r\n                    })\r\n                    break;\r\n                case 2:\r\n                    connection.beginTransaction(function (err) {\r\n                        var sql = \"UPDATE orders SET status=?, delayDate=? WHERE order_id=?\";\r\n                        connection.query(sql, [req.body.newStatus, new Date, req.body.orderId], function (err, result, fields) {\r\n                            if (err) {\r\n                                connection.rollback(function () {\r\n                                    throw err;\r\n                                });\r\n                            }\r\n\r\n                            var sql = \"INSERT INTO orderStatusHistory (order_id, status, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?)\";\r\n                            connection.query(sql, [req.body.orderId, req.body.newStatus, req.user.username, new Date], function (err, result, fields) {\r\n                                if (err) {\r\n                                    connection.rollback(function () {\r\n                                        throw err;\r\n                                    });\r\n                                }\r\n\r\n                                connection.commit(function (err) {\r\n                                    if (err) {\r\n                                        connection.rollback(function () {\r\n                                            throw err;\r\n                                        });\r\n                                    }\r\n                                    console.log(\"Order Status updated\");\r\n                                    res.status(200).send(\"OK\");\r\n                                });\r\n                            })\r\n                        })\r\n                        connection.release();\r\n\r\n                        // Handle error after the release.\r\n                        if (err) throw err;\r\n                    })\r\n                    break;\r\n                case 3:\r\n                    connection.beginTransaction(function (err) {\r\n                        var sql = \"UPDATE orders SET status=?, shippingDate=? WHERE order_id=?\";\r\n                        connection.query(sql, [req.body.newStatus, new Date, req.body.orderId], function (err, result, fields) {\r\n                            if (err) {\r\n                                connection.rollback(function () {\r\n                                    throw err;\r\n                                });\r\n                            }\r\n\r\n                            var sql = \"INSERT INTO orderStatusHistory (order_id, status, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?)\";\r\n                            connection.query(sql, [req.body.orderId, req.body.newStatus, req.user.username, new Date], function (err, result, fields) {\r\n                                if (err) {\r\n                                    connection.rollback(function () {\r\n                                        throw err;\r\n                                    });\r\n                                }\r\n\r\n                                connection.commit(function (err) {\r\n                                    if (err) {\r\n                                        connection.rollback(function () {\r\n                                            throw err;\r\n                                        });\r\n                                    }\r\n                                    console.log(\"Order Status updated\");\r\n                                    res.status(200).send(\"OK\");\r\n                                });\r\n                            })\r\n                        })\r\n                        connection.release();\r\n\r\n                        // Handle error after the release.\r\n                        if (err) throw err;\r\n                    })\r\n                    break;\r\n                case 4:\r\n                    connection.beginTransaction(function (err) {\r\n                        var sql = \"UPDATE orders SET status=?, cancelDate=? WHERE order_id=?\";\r\n                        connection.query(sql, [req.body.newStatus, new Date, req.body.orderId], function (err, result, fields) {\r\n                            if (err) {\r\n                                connection.rollback(function () {\r\n                                    throw err;\r\n                                });\r\n                            }\r\n\r\n                            var sql = \"INSERT INTO orderStatusHistory (order_id, status, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?)\";\r\n                            connection.query(sql, [req.body.orderId, req.body.newStatus, req.user.username, new Date], function (err, result, fields) {\r\n                                if (err) {\r\n                                    connection.rollback(function () {\r\n                                        throw err;\r\n                                    });\r\n                                }\r\n\r\n                                connection.commit(function (err) {\r\n                                    if (err) {\r\n                                        connection.rollback(function () {\r\n                                            throw err;\r\n                                        });\r\n                                    }\r\n                                    console.log(\"Order Status updated\");\r\n                                    res.status(200).send(\"OK\");\r\n                                });\r\n                            })\r\n                        })\r\n                        connection.release();\r\n\r\n                        // Handle error after the release.\r\n                        if (err) throw err;\r\n                    })\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n        });\r\n\r\n    }\r\n    catch (error) {\r\n        res.send({ message: error.message });\r\n    }\r\n});\r\n\r\nrouter.put(\"/changeOrderDetails\", isAuth, isAdmin, async (req, res) => {\r\n\r\n    try {\r\n        mysqlConnection.getConnection(function (err, connection) {\r\n            if (err) throw err; // not connected!\r\n\r\n            connection.beginTransaction(function (err) {\r\n                if (err) { throw err; }\r\n\r\n                var sql = \"UPDATE orders SET sendingMethod=?, shippingPrice=?, paymentMethod=?,paymentMethodPrice=?, paymentType=? WHERE order_id=?\";\r\n                connection.query(sql, [req.body.sendingMethod, req.body.shippingPrice, req.body.paymentMethod, req.body.paymentMethodCost, req.body.paymentType, req.body.orderId], function (err, result, fields) {\r\n                    if (err) {\r\n                        connection.rollback(function () {\r\n                            throw err;\r\n                        });\r\n                    }\r\n\r\n                    sql = \"INSERT INTO orderSendingPaymentHistory (order_id, sendingMethod, paymentMethod, paymentType, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?, ?, ?)\";\r\n                    connection.query(sql, [req.body.orderId, req.body.sendingMethod, req.body.paymentMethod, req.body.paymentType, req.user.username, new Date], function (err, result, fields) {\r\n                        if (err) {\r\n                            connection.rollback(function () {\r\n                                throw err;\r\n                            });\r\n                        }\r\n\r\n\r\n                        sql = \"SELECT * FROM orders WHERE order_id=?\";\r\n                        connection.query(sql, [req.body.orderId], function (err, result) {\r\n                            if (err) {\r\n                                connection.rollback(function () {\r\n                                    throw err;\r\n                                });\r\n                            }\r\n\r\n                            connection.commit(function (err) {\r\n                                if (err) {\r\n                                    connection.rollback(function () {\r\n                                        throw err;\r\n                                    });\r\n                                }\r\n                                res.status(201).send(result);\r\n                                console.log('Transaction Completed Successfully.');\r\n                            })\r\n                        })\r\n                    })\r\n                })\r\n                connection.release();\r\n                // Handle error after the release.\r\n                if (err) throw err;\r\n            })\r\n        });\r\n    }\r\n    catch (error) {\r\n        res.send({ message: error.message });\r\n    }\r\n});\r\n\r\nrouter.put(\"/updateChargerAddress\", isAuth, isAdmin, async (req, res) => {\r\n\r\n    try {\r\n        mysqlConnection.getConnection(function (err, connection) {\r\n            if (err) throw err; // not connected!\r\n\r\n            if (req.body.paymentType === 'Τιμολόγιο') {\r\n                connection.beginTransaction(function (err) {\r\n                    if (err) { throw err; }\r\n                    var sql = \"UPDATE addresses INNER JOIN orders ON addresses.address_id=orders.billingAddress SET companyName=?, bussiness=?, afm=?, doy=?, country=?, district=?, city=?, street=?, phoneNumber=?, postalCode=?, comments=? WHERE orders.order_id=?\";\r\n                    connection.query(sql, [req.body.charger.companyName, req.body.charger.bussiness, req.body.charger.afm, req.body.charger.doy, req.body.charger.country, req.body.charger.district, req.body.charger.city,\r\n                    req.body.charger.street, req.body.charger.phoneNumber, req.body.charger.postalCode,\r\n                    req.body.charger.comments, req.body.orderId], function (err, result, fields) {\r\n                        if (err) {\r\n                            connection.rollback(function () {\r\n                                throw err;\r\n                            });\r\n                        }\r\n                        sql = \"INSERT INTO billingAddressHistory (order_id, companyName, bussiness, afm, doy, country, district, city, street, phoneNumber, postalCode, comments, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                        connection.query(sql, [req.body.orderId, req.body.charger.companyName, req.body.charger.bussiness, req.body.charger.afm, req.body.charger.doy, req.body.charger.country, req.body.charger.district,\r\n                        req.body.charger.city, req.body.charger.street, req.body.charger.phoneNumber, req.body.charger.postalCode, req.body.charger.comments, req.user.username, new Date], function (err, result, fields) {\r\n                            if (err) {\r\n                                connection.rollback(function () {\r\n                                    throw err;\r\n                                });\r\n                            }\r\n\r\n                            connection.commit(function (err) {\r\n                                if (err) {\r\n                                    connection.rollback(function () {\r\n                                        throw err;\r\n                                    });\r\n                                }\r\n\r\n                                res.status(200).send(\"OK\");\r\n                                console.log('Transaction Completed Successfully.');\r\n                            })\r\n                        })\r\n                    })\r\n\r\n                    connection.release();\r\n\r\n                    // Handle error after the release.\r\n                    if (err) throw err;\r\n                })\r\n            }\r\n            else if (req.body.paymentType === 'Απόδειξη') {\r\n                connection.beginTransaction(function (err) {\r\n                    if (err) { throw err; }\r\n\r\n                    var sql = \"UPDATE addresses INNER JOIN orders ON addresses.address_id=orders.billingAddress SET name=?, subname=?, country=?, district=?, city=?, street=?, phoneNumber=?, postalCode=?, comments=? WHERE orders.order_id=?\";\r\n                    connection.query(sql, [req.body.charger.name, req.body.charger.subname,\r\n                    req.body.charger.country, req.body.charger.district, req.body.charger.city,\r\n                    req.body.charger.street, req.body.charger.phoneNumber, req.body.charger.postalCode,\r\n                    req.body.charger.comments, req.body.orderId], function (err, result, fields) {\r\n                        if (err) {\r\n                            connection.rollback(function () {\r\n                                throw err;\r\n                            });\r\n                        }\r\n                        sql = \"INSERT INTO billingAddressHistory (order_id, name, subname, country, district, city, street, phoneNumber, postalCode, comments, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                        connection.query(sql, [req.body.orderId, req.body.charger.name, req.body.charger.subname, req.body.charger.country, req.body.charger.district,\r\n                        req.body.charger.city, req.body.charger.street, req.body.charger.phoneNumber, req.body.charger.postalCode, req.body.charger.comments, req.user.username, new Date], function (err, result, fields) {\r\n                            if (err) {\r\n                                connection.rollback(function () {\r\n                                    throw err;\r\n                                });\r\n                            }\r\n\r\n                            connection.commit(function (err) {\r\n                                if (err) {\r\n                                    connection.rollback(function () {\r\n                                        throw err;\r\n                                    });\r\n                                }\r\n\r\n                                res.status(200).send(\"OK\");\r\n                                console.log('Transaction Completed Successfully.');\r\n                            })\r\n                        })\r\n                    })\r\n                    connection.release();\r\n\r\n                    // Handle error after the release.\r\n                    if (err) throw err;\r\n                })\r\n            }\r\n        });\r\n    }\r\n    catch (error) {\r\n        res.send({ message: error.message });\r\n    }\r\n});\r\n\r\nrouter.put(\"/updateShippingAddress\", isAuth, isAdmin, async (req, res) => {\r\n    try {\r\n        mysqlConnection.getConnection(function (err, connection) {\r\n            if (err) throw err; // not connected!\r\n\r\n            if (req.body.shippingAddress) {\r\n                connection.beginTransaction(function (err) {\r\n                    if (err) { throw err; }\r\n                    var sql = \"UPDATE addresses INNER JOIN orders ON addresses.address_id=orders.shippingAddress SET name=?, subname=?, country=?, district=?, city=?, street=?, postalCode=? WHERE orders.order_id=?\";\r\n                    connection.query(sql, [req.body.shippingTo.name, req.body.shippingTo.subname,\r\n                    req.body.shippingTo.country, req.body.shippingTo.district, req.body.shippingTo.city,\r\n                    req.body.shippingTo.street, req.body.shippingTo.postalCode, req.body.orderId], function (err, result, fields) {\r\n                        if (err) {\r\n                            connection.rollback(function () {\r\n                                throw err;\r\n                            });\r\n                        }\r\n\r\n                        sql = \"INSERT INTO shippingAddressHistory (order_id, name, subname, country, district, city, street, phoneNumber, postalCode, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                        connection.query(sql, [req.body.orderId, req.body.shippingTo.name, req.body.shippingTo.subname, req.body.shippingTo.country, req.body.shippingTo.district,\r\n                        req.body.shippingTo.city, req.body.shippingTo.street, req.body.shippingTo.phoneNumber, req.body.shippingTo.postalCode, req.user.username, new Date], function (err, result, fields) {\r\n                            if (err) {\r\n                                connection.rollback(function () {\r\n                                    throw err;\r\n                                });\r\n                            }\r\n\r\n                            connection.commit(function (err) {\r\n                                if (err) {\r\n                                    connection.rollback(function () {\r\n                                        throw err;\r\n                                    });\r\n                                }\r\n\r\n                                res.status(200).send(\"OK\");\r\n                                console.log('Transaction Completed Successfully.');\r\n                            })\r\n                        })\r\n                    })\r\n                    connection.release();\r\n\r\n                    // Handle error after the release.\r\n                    if (err) throw err;\r\n                })\r\n            }\r\n            else {\r\n                /* Begin transaction */\r\n                connection.beginTransaction(function (err) {\r\n                    if (err) { throw err; }\r\n\r\n                    var sql = \"INSERT INTO addresses (name, subname, country, district, city, street, postalCode) VALUE (?, ?, ?, ?, ?, ?, ?)\";\r\n                    connection.query(sql, [req.body.shippingTo.name, req.body.shippingTo.subname,\r\n                    req.body.shippingTo.country, req.body.shippingTo.district, req.body.shippingTo.city,\r\n                    req.body.shippingTo.street, req.body.shippingTo.postalCode], function (err, result) {\r\n                        if (err) {\r\n                            connection.rollback(function () {\r\n                                throw err;\r\n                            });\r\n                        }\r\n\r\n                        const shippingAddress_id = result.insertId;\r\n\r\n                        sql = \"UPDATE orders SET shippingAddress=? WHERE order_id=?\";\r\n                        connection.query(sql, [shippingAddress_id, req.body.orderId], function (err, result) {\r\n                            if (err) {\r\n                                connection.rollback(function () {\r\n                                    throw err;\r\n                                });\r\n                            }\r\n\r\n                            sql = \"INSERT INTO shippingAddressHistory (order_id, name, subname, country, district, city, street, phoneNumber, postalCode, UpdatedBy, UpdatedAt) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                            connection.query(sql, [req.body.orderId, req.body.shippingTo.name, req.body.shippingTo.subname, req.body.shippingTo.country, req.body.shippingTo.district,\r\n                            req.body.shippingTo.city, req.body.shippingTo.street, req.body.shippingTo.phoneNumber, req.body.shippingTo.postalCode, req.user.username, new Date], function (err, result, fields) {\r\n                                if (err) {\r\n                                    connection.rollback(function () {\r\n                                        throw err;\r\n                                    });\r\n                                }\r\n\r\n                                connection.commit(function (err) {\r\n                                    if (err) {\r\n                                        connection.rollback(function () {\r\n                                            throw err;\r\n                                        });\r\n                                    }\r\n                                });\r\n                            })\r\n                        });\r\n                    });\r\n                    connection.release();\r\n\r\n                    // Handle error after the release.\r\n                    if (err) throw err;\r\n                });\r\n                /* End transaction */\r\n            }\r\n        });\r\n    }\r\n    catch (error) {\r\n        res.send({ message: error.message });\r\n    }\r\n});\r\n\r\nrouter.put(\"/updateOrder\", isAuth, isAdmin, async (req, res) => {\r\n\r\n    try {\r\n        console.log(req.body.itemsCost)\r\n        mysqlConnection.getConnection(function (err, connection) {\r\n            if (err) throw err; // not connected!\r\n\r\n            connection.beginTransaction(function (err) {\r\n                if (err) { throw err; }\r\n\r\n                var sql = \"UPDATE order_products SET quantity=? WHERE order_id=? && model=? && product_id=?\";\r\n                connection.query(sql, [req.body.quantity, req.body.order_id, req.body.model, req.body.product_id], function (err, result, fields) {\r\n                    if (err) {\r\n                        connection.rollback(function () {\r\n                            throw err;\r\n                        });\r\n                    }\r\n\r\n                    sql = \"SELECT SUM(order_products.quantity*products.totalPrice) AS itemscost FROM order_products INNER JOIN products on order_products.product_id=products._id WHERE order_products.order_id=? \";\r\n                    connection.query(sql, [req.body.order_id], function (err, result, fields) {\r\n                        if (err) {\r\n                            connection.rollback(function () {\r\n                                throw err;\r\n                            });\r\n                        }\r\n                        const itemsCost = result[0].itemscost;\r\n\r\n                        var sql = \"UPDATE orders SET itemsPrice=? WHERE order_id=?\";\r\n                        connection.query(sql, [itemsCost, req.body.order_id], function (err, result, fields) {\r\n                            if (err) {\r\n                                connection.rollback(function () {\r\n                                    throw err;\r\n                                });\r\n                            }\r\n\r\n                            sql = \"INSERT INTO orderProductHistory (order_id, product_id, model, quantity, UpdatedBy, UpdatedAt, actions) VALUES (?, ?, ?, ?, ?, ?, ?)\";\r\n                            connection.query(sql, [req.body.order_id, req.body.product_id, req.body.model, req.body.quantity, req.user.username, new Date, \"Αλλαγή Ποσότητας\"], function (err, result, fields) {\r\n                                if (err) {\r\n                                    connection.rollback(function () {\r\n                                        throw err;\r\n                                    });\r\n                                }\r\n\r\n                                connection.commit(function (err) {\r\n                                    if (err) {\r\n                                        connection.rollback(function () {\r\n                                            throw err;\r\n                                        });\r\n                                    }\r\n\r\n                                    res.status(200).send(\"OK\");\r\n                                    console.log('Transaction Completed Successfully.');\r\n                                })\r\n                            })\r\n                        })\r\n                    })\r\n                })\r\n            })\r\n            connection.release();\r\n\r\n            // Handle error after the release.\r\n            if (err) throw err;\r\n        })\r\n    }\r\n    catch (error) {\r\n        res.send({ message: error.message });\r\n    }\r\n});\r\n\r\nrouter.post(\"/removeOrderItem\", isAuth, isAdmin, async (req, res) => {\r\n\r\n    try {\r\n        mysqlConnection.getConnection(function (err, connection) {\r\n            if (err) throw err; // not connected!\r\n\r\n            connection.beginTransaction(function (err) {\r\n                if (err) { throw err; }\r\n\r\n                var sql = \"INSERT INTO orderProductHistory (order_id, product_id, model, quantity, UpdatedBy, UpdatedAt, actions) VALUES (?, ?, ?, ?, ?, ?, ?)\";\r\n                connection.query(sql, [req.body.order_id, req.body.product_id, req.body.model, req.body.quantity, req.user.username, new Date, \"Διαγραφή\"], function (err, result, fields) {\r\n                    if (err) {\r\n                        connection.rollback(function () {\r\n                            throw err;\r\n                        });\r\n                    }\r\n\r\n                    var sql = \"DELETE FROM order_products WHERE order_id=? && model=? && product_id=?\";\r\n                    connection.query(sql, [req.body.order_id, req.body.model, req.body.product_id], function (err, result, fields) {\r\n                        if (err) throw err;\r\n\r\n                        sql = \"SELECT SUM(order_products.quantity*products.totalPrice) AS itemscost FROM order_products INNER JOIN products on order_products.product_id=products._id WHERE order_products.order_id=? \";\r\n                        connection.query(sql, [req.body.order_id], function (err, result, fields) {\r\n                            if (err) {\r\n                                connection.rollback(function () {\r\n                                    throw err;\r\n                                });\r\n                            }\r\n                            const itemsCost = result[0].itemscost;\r\n\r\n                            var sql = \"UPDATE orders SET itemsPrice=? WHERE order_id=?\";\r\n                            connection.query(sql, [itemsCost, req.body.order_id], function (err, result, fields) {\r\n                                if (err) {\r\n                                    connection.rollback(function () {\r\n                                        throw err;\r\n                                    });\r\n                                }\r\n\r\n                                connection.commit(function (err) {\r\n                                    if (err) {\r\n                                        connection.rollback(function () {\r\n                                            throw err;\r\n                                        });\r\n                                    }\r\n\r\n                                    res.status(200).send(\"OK\");\r\n                                    console.log('Transaction Completed Successfully.');\r\n                                })\r\n                            })\r\n                        })\r\n                    })\r\n                })\r\n                connection.release();\r\n\r\n                // Handle error after the release.\r\n                if (err) throw err;\r\n            })\r\n        });\r\n    }\r\n    catch (error) {\r\n        res.send({ message: error.message });\r\n    }\r\n});\r\n\r\nrouter.post(\"/customerOrders\", isAuth, async (req, res) => {\r\n    mysqlConnection.getConnection(function (err, connection) {\r\n        if (err) throw err; // not connected!\r\n\r\n        let sql = \"SELECT * FROM orders WHERE user_id=? ORDER BY orderDate DESC\";\r\n        connection.query(sql, [req.body.email], function (err, result) {\r\n            if (err) throw err;\r\n\r\n            res.send(result);\r\n        });\r\n        connection.release();\r\n\r\n        // Handle error after the release.\r\n        if (err) throw err;\r\n    });\r\n});\r\n\r\nrouter.get(\"/customerOrders/:id\", isAuth, async (req, res) => {\r\n    const orderId = req.params.id;\r\n    mysqlConnection.getConnection(function (err, connection) {\r\n        if (err) throw err; // not connected!\r\n        /* Begin transaction */\r\n        connection.beginTransaction(function (err) {\r\n            if (err) { throw err; }\r\n\r\n            let sql = \"SELECT * FROM orders WHERE order_id=?\";\r\n            connection.query(sql, [orderId], function (err, result) {\r\n                if (err) {\r\n                    connection.rollback(function () {\r\n                        throw err;\r\n                    });\r\n                }\r\n\r\n                const order = result[0];\r\n\r\n                sql = \"SELECT addresses.* FROM addresses INNER JOIN orders ON addresses.address_id = orders.billingAddress WHERE orders.order_id=?\";\r\n                connection.query(sql, [orderId], function (err, result) {\r\n                    if (err) {\r\n                        connection.rollback(function () {\r\n                            throw err;\r\n                        });\r\n                    }\r\n\r\n                    var billingAddress = result[0];\r\n\r\n                    sql = \"SELECT addresses.* FROM addresses INNER JOIN orders ON addresses.address_id = orders.shippingAddress WHERE orders.order_id=?\";\r\n                    connection.query(sql, [orderId], function (err, result) {\r\n                        if (err) {\r\n                            connection.rollback(function () {\r\n                                throw err;\r\n                            });\r\n                        }\r\n\r\n                        var shippingAddress = result[0];\r\n\r\n                        sql = \"SELECT products._id, products.name, products.image, products.category,products.subcategory, products.totalPrice, products.countInStock, order_products.quantity, order_products.model FROM products INNER JOIN order_products ON products._id = order_products.product_id WHERE order_products.order_id=?\";\r\n                        connection.query(sql, [orderId], function (err, result) {\r\n                            if (err) {\r\n                                connection.rollback(function () {\r\n                                    throw err;\r\n                                });\r\n                            }\r\n\r\n                            var products = result;\r\n\r\n                            var response = {\r\n                                order,\r\n                                billingAddress,\r\n                                shippingAddress,\r\n                                products\r\n                            };\r\n                            res.send(response);\r\n\r\n\r\n                            connection.commit(function (err) {\r\n                                if (err) {\r\n                                    connection.rollback(function () {\r\n                                        throw err;\r\n                                    });\r\n                                }\r\n                            });\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        });\r\n        /* End transaction */\r\n        connection.release();\r\n        // Handle error after the release.\r\n        if (err) throw err;\r\n    });\r\n});\r\n\r\n\r\nexport default router;"],"file":"orderRoute.js"}