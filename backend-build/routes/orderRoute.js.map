{"version":3,"sources":["../../backend/routes/orderRoute.js"],"names":["router","express","Router","post","isAuth","req","res","mysqlConnection","getConnection","err","connection","beginTransaction","sql","query","body","charger","name","subname","phoneNumber","country","district","city","address","postalCode","company","companyName","bussiness","doy","afm","email","result","fields","rollback","chargerAddress_id","address_id","shippingTo","shippingAddress_id","insertId","methods","typeOfPayment","paymentMethod","paymentMethodCost","sendingMethod","sendingMethodCost","comments","itemsCost","order_id","commit","console","log","response","status","send","release","mapCartItems","cartItems","map","x","rObj","_id","model","quantity","isAdmin","itemsPerPage","offset","resp","count","get","orderId","params","id","order","billingAddress","shippingAddress","products","put","dates","dateIndex","newStatus","proccessDate","delayDate","shippingDate","cancelDate","error","message","StatusIndex","Date","shippingPrice","paymentType","street","product_id"],"mappings":"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","sourcesContent":["import express from 'express';\r\nimport { getToken, isAuth, isAdmin } from '../util.js';\r\nimport mysqlConnection from '../connection';\r\n\r\nconst router= express.Router();\r\n\r\nrouter.post(\"/insert_order_company_shippingTo\", isAuth, async (req, res)=>{\r\n    \r\n    mysqlConnection.getConnection(function(err, connection) {\r\n        connection.beginTransaction(function(err) {\r\n            if (err) { throw err; }\r\n            let sql = \"UPDATE addresses SET name=?, subname=?, phoneNumber=?,country=?, district=?, city=?, street=?, postalCode=?, companyName=?, bussiness=?, doy=?, afm=? WHERE user_id=?\";\r\n            connection.query(sql, [req.body.charger.name,req.body.charger.subname,req.body.charger.phoneNumber,req.body.charger.country,\r\n                req.body.charger.district,req.body.charger.city,req.body.charger.address,req.body.charger.postalCode,\r\n                req.body.company.companyName,req.body.company.bussiness,req.body.company.doy,req.body.company.afm, req.body.charger.email], function(err, result, fields) {\r\n                if (err) { \r\n                    connection.rollback(function() {\r\n                    throw err;\r\n                    });\r\n                }\r\n\r\n                let sql = \"Select address_id FROM addresses WHERE user_id=?\";\r\n                connection.query(sql, [req.body.charger.email], function(err, result, fields) {\r\n                    if (err) { \r\n                        connection.rollback(function() {\r\n                        throw err;\r\n                        });\r\n                    }\r\n\r\n                    const chargerAddress_id = result[0].address_id;\r\n\r\n                    sql = \"INSERT INTO addresses (name, subname, phoneNumber,country, district, city, street, postalCode) VALUES (?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                    connection.query(sql, [req.body.shippingTo.name, req.body.shippingTo.subname, req.body.shippingTo.phoneNumber, req.body.shippingTo.country,\r\n                    req.body.shippingTo.district, req.body.shippingTo.city, req.body.shippingTo.address, req.body.shippingTo.postalCode], function(err, result, fields) {\r\n                        if (err) { \r\n                            connection.rollback(function() {\r\n                            throw err;\r\n                            });\r\n                        }\r\n\r\n                        const shippingAddress_id = result.insertId;\r\n\r\n                        sql = \"INSERT INTO orders (user_email, billingAddress, shippingAddress, paymentType, paymentMethod, paymentMethodPrice, sendingMethod,shippingPrice, comments, itemsPrice, user_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                        connection.query(sql, [req.body.charger.email, chargerAddress_id, shippingAddress_id, req.body.methods.typeOfPayment,\r\n                            req.body.methods.paymentMethod, req.body.methods.paymentMethodCost, req.body.methods.sendingMethod, req.body.methods.sendingMethodCost, req.body.methods.comments, req.body.itemsCost, req.body.charger.email], function(err, result) {\r\n                            if (err) { \r\n                                connection.rollback(function() {\r\n                                throw err;\r\n                                });\r\n                            }\r\n\r\n                            const order_id = result.insertId;\r\n\r\n                            sql = \"INSERT INTO order_products (order_id, product_id, model, quantity, image_case) SELECT ?, cart.product_id, cart.model, cart.quantity, cart.image_case FROM cart WHERE user_email=?\";\r\n                            connection.query(sql, [order_id, req.body.charger.email], function(err, result) {\r\n                                if (err) { \r\n                                    connection.rollback(function() {\r\n                                    throw err;\r\n                                    });\r\n                                }\r\n\r\n                                sql = \"DELETE FROM cart WHERE user_email=?\";\r\n                                connection.query(sql, [ req.body.charger.email], function(err, result) {\r\n                                    if (err) { \r\n                                        connection.rollback(function() {\r\n                                        throw err;\r\n                                        });\r\n                                    }\r\n\r\n                                    connection.commit(function(err) {\r\n                                        if (err) { \r\n                                            connection.rollback(function() {\r\n                                                throw err;\r\n                                            });\r\n                                        }\r\n                                        console.log('Transaction Completed Successfully.');\r\n                                        var response={order_id}\r\n                                        res.status(200).send(response);\r\n                                        connection.release();\r\n                                    });\r\n                                });\r\n                            });\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        });\r\n          /* End transaction */\r\n    });\r\n});\r\n\r\nrouter.post(\"/insert_no_user_order_company_shippingTo\", async (req, res)=>{\r\n       \r\n    mysqlConnection.getConnection(function(err, connection) {\r\n        connection.beginTransaction(function(err) {\r\n            if (err) { throw err; }\r\n            let sql = \"INSERT INTO addresses (user_email, name, subname, phoneNumber, country, district, city, street, postalCode, companyName, bussiness, afm, doy) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n            connection.query(sql, [req.body.charger.email, req.body.charger.name,req.body.charger.subname,req.body.charger.phoneNumber,req.body.charger.country,\r\n                req.body.charger.district,req.body.charger.city,req.body.charger.address,req.body.charger.postalCode,\r\n                req.body.company.companyName,req.body.company.bussiness,req.body.company.afm,req.body.company.doy], function(err, result, fields) {\r\n                if (err) { \r\n                    connection.rollback(function() {\r\n                    throw err;\r\n                    });\r\n                }\r\n                \r\n                const chargerAddress_id = result.insertId;\r\n\r\n                sql = \"INSERT INTO addresses (name, subname, phoneNumber,country, district, city, street, postalCode) VALUES (?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                connection.query(sql, [req.body.shippingTo.name, req.body.shippingTo.subname, req.body.shippingTo.phoneNumber, req.body.shippingTo.country,\r\n                req.body.shippingTo.district, req.body.shippingTo.city, req.body.shippingTo.address, req.body.shippingTo.postalCode], function(err, result, fields) {\r\n                    if (err) { \r\n                        connection.rollback(function() {\r\n                        throw err;\r\n                        });\r\n                    }\r\n\r\n                    const shippingAddress_id = result.insertId;\r\n                    \r\n                    sql = \"INSERT INTO orders (user_email, billingAddress, shippingAddress, paymentType, paymentMethod, sendingMethod, comments, itemsPrice, paymentMethodPrice,shippingPrice ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                    connection.query(sql, [req.body.charger.email, chargerAddress_id, shippingAddress_id, req.body.methods.typeOfPayment,\r\n                        req.body.methods.paymentMethod, req.body.methods.sendingMethod, req.body.methods.comments, \r\n                        req.body.itemsCost,req.body.methods.paymentMethodCost,req.body.methods.sendingMethodCost], function(err, result) {\r\n                        if (err) { \r\n                            connection.rollback(function() {\r\n                            throw err;\r\n                            });\r\n                        }\r\n\r\n                        const order_id = result.insertId;\r\n\r\n                        const mapCartItems = req.body.cartItems.map(x=> \r\n                            {let rObj = [];\r\n                            rObj[0]=order_id; \r\n                            rObj[1]=x._id;\r\n                            rObj[2]=x.model; \r\n                            rObj[3]=x.quantity;\r\n                            return rObj}\r\n                        )\r\n\r\n                        sql = \"INSERT INTO order_products (order_id,product_id,model,quantity) VALUES ?\"\r\n                        connection.query(sql, [mapCartItems], function(err, result) {\r\n                            if (err) { \r\n                                connection.rollback(function() {\r\n                                throw err;\r\n                                });\r\n                            } \r\n\r\n                            connection.commit(function(err) {\r\n                                if (err) { \r\n                                    connection.rollback(function() {\r\n                                        throw err;\r\n                                    });\r\n                                }\r\n                                console.log('Transaction Completed Successfully.');\r\n                                var response={order_id}\r\n                                res.status(200).send(response);\r\n                                connection.release();\r\n                            });                            \r\n                        });\r\n                    });\r\n                });                \r\n            });\r\n        });\r\n          /* End transaction */\r\n    });\r\n});\r\n\r\nrouter.post(\"/insert_order_company\", isAuth, async (req, res)=>{\r\n   \r\n    mysqlConnection.getConnection(function(err, connection) {\r\n        connection.beginTransaction(function(err) {\r\n            if (err) { throw err; }\r\n            let sql = \"UPDATE addresses SET name=?, subname=?, phoneNumber=?, country=?, district=?, city=?, street=?, postalCode=?, companyName=?, bussiness=?, doy=?, afm=? WHERE user_id=?\";\r\n            connection.query(sql, [req.body.charger.name,req.body.charger.subname,req.body.charger.phoneNumber,req.body.charger.country,\r\n                req.body.charger.district,req.body.charger.city,req.body.charger.address,req.body.charger.postalCode,\r\n                req.body.company.companyName,req.body.company.bussiness,req.body.company.doy,req.body.company.afm, req.body.charger.email], function(err, result, fields) {\r\n                if (err) { \r\n                    connection.rollback(function() {\r\n                    throw err;\r\n                    });\r\n                }\r\n\r\n                let sql = \"Select address_id FROM addresses WHERE user_id=?\";\r\n                connection.query(sql, [req.body.charger.email], function(err, result, fields) {\r\n                    if (err) { \r\n                        connection.rollback(function() {\r\n                        throw err;\r\n                        });\r\n                    }\r\n\r\n                    const chargerAddress_id = result[0].address_id;\r\n                    \r\n                    sql = \"INSERT INTO orders (user_email, billingAddress, paymentType, paymentMethod, sendingMethod, comments, itemsPrice, paymentMethodPrice, shippingPrice, user_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                    connection.query(sql, [req.body.charger.email, chargerAddress_id, req.body.methods.typeOfPayment,\r\n                        req.body.methods.paymentMethod, req.body.methods.sendingMethod, req.body.methods.comments, \r\n                        req.body.itemsCost,req.body.methods.paymentMethodCost,req.body.methods.sendingMethodCost, req.body.charger.email], function(err, result) {\r\n                        if (err) { \r\n                            connection.rollback(function() {\r\n                            throw err;\r\n                            });\r\n                        }\r\n\r\n                        const order_id = result.insertId;\r\n\r\n                        sql = \"INSERT INTO order_products (order_id, product_id, model, quantity, image_case) SELECT ?, cart.product_id, cart.model, cart.quantity, cart.image_case FROM cart WHERE user_email=?\";\r\n                        connection.query(sql, [order_id, req.body.charger.email], function(err, result) {\r\n                            if (err) { \r\n                                connection.rollback(function() {\r\n                                throw err;\r\n                                });\r\n                            }\r\n\r\n                            sql = \"DELETE FROM cart WHERE user_email=?\";\r\n                            connection.query(sql, [req.body.charger.email], function(err, result) {\r\n                                if (err) { \r\n                                    connection.rollback(function() {\r\n                                    throw err;\r\n                                    });\r\n                                }\r\n\r\n                                connection.commit(function(err) {\r\n                                    if (err) { \r\n                                        connection.rollback(function() {\r\n                                            throw err;\r\n                                        });\r\n                                    }\r\n                                    console.log('Transaction Completed Successfully.');\r\n                                    var response={order_id}\r\n                                    res.status(200).send(response);\r\n                                    connection.release();\r\n                                });\r\n                            });\r\n                        });\r\n                    });                    \r\n                });\r\n            });\r\n        });\r\n          /* End transaction */\r\n    });\r\n});\r\n\r\nrouter.post(\"/insert_no_user_order_company\", async (req, res)=>{\r\n    mysqlConnection.getConnection(function(err, connection) {\r\n        connection.beginTransaction(function(err) {\r\n            if (err) { throw err; }\r\n            let sql = \"INSERT INTO addresses (user_email, name, subname, phoneNumber,country, district, city, street, postalCode, companyName, bussiness, afm, doy) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n            connection.query(sql, [req.body.charger.email, req.body.charger.name,req.body.charger.subname,req.body.charger.phoneNumber,req.body.charger.country,\r\n                req.body.charger.district,req.body.charger.city,req.body.charger.address,req.body.charger.postalCode,\r\n                req.body.company.companyName,req.body.company.bussiness,req.body.company.afm,req.body.company.doy], function(err, result, fields) {\r\n                if (err) { \r\n                    connection.rollback(function() {\r\n                    throw err;\r\n                    });\r\n                }               \r\n\r\n                const chargerAddress_id = result.insertId;\r\n                \r\n                sql = \"INSERT INTO orders (user_email, billingAddress, paymentType, paymentMethod, sendingMethod, comments, itemsPrice, paymentMethodPrice, shippingPrice) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                connection.query(sql, [req.body.charger.email, chargerAddress_id, req.body.methods.typeOfPayment,\r\n                    req.body.methods.paymentMethod, req.body.methods.sendingMethod, req.body.methods.comments, \r\n                    req.body.itemsCost, req.body.methods.paymentMethodCost, req.body.methods.sendingMethodCost], function(err, result) {\r\n                    if (err) { \r\n                        connection.rollback(function() {\r\n                        throw err;\r\n                        });\r\n                    }\r\n\r\n                    const order_id = result.insertId;\r\n\r\n                        const mapCartItems = req.body.cartItems.map(x=> \r\n                            {let rObj = [];\r\n                            rObj[0]=order_id; \r\n                            rObj[1]=x._id;\r\n                            rObj[2]=x.model; \r\n                            rObj[3]=x.quantity;\r\n                            return rObj})\r\n\r\n\r\n                        sql = \"INSERT INTO order_products (order_id,product_id,model,quantity) VALUES ?\"\r\n                        connection.query(sql, [mapCartItems], function(err, result) {\r\n                            if (err) { \r\n                                connection.rollback(function() {\r\n                                throw err;\r\n                                });\r\n                            }\r\n                        \r\n                        connection.commit(function(err) {\r\n                            if (err) { \r\n                                connection.rollback(function() {\r\n                                    throw err;\r\n                                });\r\n                            }\r\n                            console.log('Transaction Completed Successfully.');\r\n                            var response={order_id}\r\n                            res.status(200).send(response);\r\n                            connection.release();\r\n                        });\r\n                    });\r\n                });                \r\n            });\r\n        });\r\n          /* End transaction */\r\n    });\r\n});\r\n\r\nrouter.post(\"/insert_order_shippingTo\", isAuth, async (req, res)=>{\r\n    \r\n    mysqlConnection.getConnection(function(err, connection) {\r\n        connection.beginTransaction(function(err) {\r\n            if (err) { throw err; }\r\n            let sql = \"UPDATE addresses SET name=?, subname=?, phoneNumber=?,country=?, district=?, city=?, street=?, postalCode=? WHERE user_id=?\";\r\n            connection.query(sql, [req.body.charger.name,req.body.charger.subname,req.body.charger.phoneNumber,req.body.charger.country,\r\n                req.body.charger.district,req.body.charger.city,req.body.charger.address,req.body.charger.postalCode,req.body.charger.email], function(err, result, fields) {\r\n                if (err) { \r\n                    connection.rollback(function() {\r\n                    throw err;\r\n                    });\r\n                }\r\n\r\n                let sql = \"Select address_id FROM addresses WHERE user_id=?\";\r\n                connection.query(sql, [req.body.charger.email], function(err, result, fields) {\r\n                    if (err) { \r\n                        connection.rollback(function() {\r\n                        throw err;\r\n                        });\r\n                    }\r\n\r\n                    const chargerAddress_id = result[0].address_id;\r\n\r\n                    sql = \"INSERT INTO addresses (name, subname, phoneNumber,country, district, city, street, postalCode) VALUES (?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                    connection.query(sql, [req.body.shippingTo.name, req.body.shippingTo.subname, req.body.shippingTo.phoneNumber, req.body.shippingTo.country,\r\n                    req.body.shippingTo.district, req.body.shippingTo.city, req.body.shippingTo.address, req.body.shippingTo.postalCode], function(err, result, fields) {\r\n                        if (err) { \r\n                            connection.rollback(function() {\r\n                            throw err;\r\n                            });\r\n                        }\r\n\r\n                        const shippingAddress_id = result.insertId;\r\n\r\n                        sql = \"INSERT INTO orders (user_email, billingAddress, shippingAddress, paymentType, paymentMethod, sendingMethod, comments, itemsPrice, paymentMethodPrice, shippingPrice, user_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                        connection.query(sql, [req.body.charger.email, chargerAddress_id, shippingAddress_id, req.body.methods.typeOfPayment,\r\n                            req.body.methods.paymentMethod, req.body.methods.sendingMethod, req.body.methods.comments,\r\n                            req.body.itemsCost,req.body.methods.paymentMethodCost,req.body.methods.sendingMethodCost, req.body.charger.email], function(err, result) {\r\n                            if (err) { \r\n                                connection.rollback(function() {\r\n                                throw err;\r\n                                });\r\n                            }\r\n\r\n                            const order_id = result.insertId;\r\n\r\n                            sql = \"INSERT INTO order_products (order_id, product_id, model, quantity, image_case) SELECT ?, cart.product_id, cart.model, cart.quantity, cart.image_case FROM cart WHERE user_email=?\";\r\n                            connection.query(sql, [order_id, req.body.charger.email], function(err, result) {\r\n                                if (err) { \r\n                                    connection.rollback(function() {\r\n                                    throw err;\r\n                                    });\r\n                                }\r\n\r\n                                sql = \"DELETE FROM cart WHERE user_email=?\";\r\n                                connection.query(sql, [ req.body.charger.email], function(err, result) {\r\n                                    if (err) { \r\n                                        connection.rollback(function() {\r\n                                        throw err;\r\n                                        });\r\n                                    }\r\n\r\n                                    connection.commit(function(err) {\r\n                                        if (err) { \r\n                                            connection.rollback(function() {\r\n                                                throw err;\r\n                                            });\r\n                                        }\r\n                                        console.log('Transaction Completed Successfully.');\r\n                                        var response={order_id}\r\n                                        res.status(200).send(response);\r\n                                        connection.release();\r\n                                    });\r\n                                });\r\n                            });\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        });\r\n          /* End transaction */\r\n    });\r\n});\r\n\r\nrouter.post(\"/insert_no_user_order_shippingTo\", async (req, res)=>{\r\n    \r\n    mysqlConnection.getConnection(function(err, connection) {\r\n        connection.beginTransaction(function(err) {\r\n            if (err) { throw err; }\r\n            let sql = \"INSERT INTO addresses (user_email, name, subname, phoneNumber,country, district, city, street, postalCode) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n            connection.query(sql, [req.body.charger.email, req.body.charger.name,req.body.charger.subname,req.body.charger.phoneNumber,req.body.charger.country,\r\n                req.body.charger.district,req.body.charger.city,req.body.charger.address,req.body.charger.postalCode], function(err, result, fields) {\r\n                if (err) { \r\n                    connection.rollback(function() {\r\n                    throw err;\r\n                    });\r\n                }               \r\n\r\n                const chargerAddress_id = result.insertId;\r\n\r\n                sql = \"INSERT INTO addresses (name, subname, phoneNumber,country, district, city, street, postalCode) VALUES (?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                connection.query(sql, [req.body.shippingTo.name, req.body.shippingTo.subname, req.body.shippingTo.phoneNumber, req.body.shippingTo.country,\r\n                req.body.shippingTo.district, req.body.shippingTo.city, req.body.shippingTo.address, req.body.shippingTo.postalCode], function(err, result, fields) {\r\n                    if (err) { \r\n                        connection.rollback(function() {\r\n                        throw err;\r\n                        });\r\n                    }\r\n\r\n                    const shippingAddress_id = result.insertId;\r\n\r\n                    sql = \"INSERT INTO orders (user_email, billingAddress, shippingAddress, paymentType, paymentMethod, sendingMethod, comments, itemsPrice, paymentMethodPrice, shippingPrice) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                    connection.query(sql, [req.body.charger.email, chargerAddress_id, shippingAddress_id, req.body.methods.typeOfPayment,\r\n                        req.body.methods.paymentMethod, req.body.methods.sendingMethod, req.body.methods.comments, \r\n                        req.body.itemsCost, req.body.methods.paymentMethodCost, req.body.methods.sendingMethodCost], function(err, result) {\r\n                        if (err) { \r\n                            connection.rollback(function() {\r\n                            throw err;\r\n                            });\r\n                        }\r\n\r\n                        const order_id = result.insertId;\r\n\r\n                        const mapCartItems = req.body.cartItems.map(x=> \r\n                            {let rObj = [];\r\n                            rObj[0]=order_id; \r\n                            rObj[1]=x._id;\r\n                            rObj[2]=x.model; \r\n                            rObj[3]=x.quantity;\r\n                            return rObj}\r\n                        )\r\n\r\n                        sql = \"INSERT INTO order_products (order_id,product_id,model,quantity) VALUES ?\"\r\n                        connection.query(sql, [mapCartItems], function(err, result) {\r\n                            if (err) { \r\n                                connection.rollback(function() {\r\n                                throw err;\r\n                                });\r\n                            }    \r\n                            connection.commit(function(err) {\r\n                                if (err) { \r\n                                    connection.rollback(function() {\r\n                                        throw err;\r\n                                    });\r\n                                }\r\n                                console.log('Transaction Completed Successfully.');\r\n                                var response={order_id}\r\n                                res.status(200).send(response);\r\n                                connection.release();\r\n                            });                            \r\n                        });\r\n                    });\r\n                });                \r\n            });\r\n        });\r\n          /* End transaction */\r\n    });\r\n})\r\n\r\nrouter.post(\"/insert_order\", isAuth, async (req, res)=>{\r\n    \r\n    mysqlConnection.getConnection(function(err, connection) {\r\n        connection.beginTransaction(function(err) {\r\n            if (err) { throw err; }\r\n            let sql = \"UPDATE addresses SET name=?, subname=?, phoneNumber=?,country=?, district=?, city=?, street=?, postalCode=? WHERE user_id=?\";\r\n            connection.query(sql, [req.body.charger.name,req.body.charger.subname,req.body.charger.phoneNumber,req.body.charger.country,\r\n                req.body.charger.district,req.body.charger.city,req.body.charger.address,req.body.charger.postalCode,req.body.charger.email], function(err, result, fields) {\r\n                if (err) { \r\n                    connection.rollback(function() {\r\n                    throw err;\r\n                    });\r\n                }\r\n\r\n                let sql = \"Select address_id FROM addresses WHERE user_id=?\";\r\n                connection.query(sql, [req.body.charger.email], function(err, result, fields) {\r\n                    if (err) { \r\n                        connection.rollback(function() {\r\n                        throw err;\r\n                        });\r\n                    }\r\n\r\n                    const chargerAddress_id = result[0].address_id;\r\n                    \r\n                    sql = \"INSERT INTO orders (user_email, billingAddress, paymentType, paymentMethod, sendingMethod, comments, itemsPrice, paymentMethodPrice, shippingPrice, user_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                    connection.query(sql, [req.body.charger.email, chargerAddress_id, req.body.methods.typeOfPayment,\r\n                        req.body.methods.paymentMethod, req.body.methods.sendingMethod, req.body.methods.comments, \r\n                        req.body.itemsCost,req.body.methods.paymentMethodCost,req.body.methods.sendingMethodCost, req.body.charger.email], function(err, result) {\r\n                        if (err) { \r\n                            connection.rollback(function() {\r\n                            throw err;\r\n                            });\r\n                        }\r\n\r\n                        const order_id = result.insertId;\r\n\r\n                        sql = \"INSERT INTO order_products (order_id, product_id, model, quantity, image_case) SELECT ?, cart.product_id, cart.model, cart.quantity, cart.image_case FROM cart WHERE user_email=?\";\r\n                        connection.query(sql, [order_id, req.body.charger.email], function(err, result) {\r\n                            if (err) { \r\n                                connection.rollback(function() {\r\n                                throw err;\r\n                                });\r\n                            }\r\n\r\n                            sql = \"DELETE FROM cart WHERE user_email=?\";\r\n                            connection.query(sql, [req.body.charger.email], function(err, result) {\r\n                                if (err) { \r\n                                    connection.rollback(function() {\r\n                                    throw err;\r\n                                    });\r\n                                }\r\n\r\n                                connection.commit(function(err) {\r\n                                    if (err) { \r\n                                        connection.rollback(function() {\r\n                                            throw err;\r\n                                        });\r\n                                    }\r\n                                    console.log('Transaction Completed Successfully.');\r\n                                    var response={order_id}\r\n                                    res.status(200).send(response);\r\n                                    connection.release();\r\n                                });\r\n                            });\r\n                        });\r\n                    });                    \r\n                });\r\n            });\r\n        });\r\n          /* End transaction */\r\n    });\r\n});\r\n\r\nrouter.post(\"/insert_no_user_order\", async (req, res)=>{\r\n    \r\n    mysqlConnection.getConnection(function(err, connection) {\r\n        connection.beginTransaction(function(err) {\r\n            if (err) { throw err; }\r\n            let sql = \"INSERT INTO addresses (user_email, name, subname, phoneNumber,country, district, city, street, postalCode) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n            connection.query(sql, [req.body.charger.email, req.body.charger.name,req.body.charger.subname,req.body.charger.phoneNumber,req.body.charger.country,\r\n                req.body.charger.district,req.body.charger.city,req.body.charger.address,req.body.charger.postalCode], function(err, result, fields) {\r\n                if (err) { \r\n                    connection.rollback(function() {\r\n                    throw err;\r\n                    });\r\n                }\r\n\r\n                const chargerAddress_id = result.insertId;\r\n                \r\n                sql = \"INSERT INTO orders (user_email, billingAddress, paymentType, paymentMethod, sendingMethod, comments, itemsPrice, paymentMethodPrice, shippingPrice) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n                connection.query(sql, [req.body.charger.email, chargerAddress_id, req.body.methods.typeOfPayment,\r\n                    req.body.methods.paymentMethod, req.body.methods.sendingMethod, req.body.methods.comments, \r\n                    req.body.itemsCost, req.body.methods.paymentMethodCost, req.body.methods.sendingMethodCost], function(err, result) {\r\n                    if (err) { \r\n                        connection.rollback(function() {\r\n                        throw err;\r\n                        });\r\n                    }\r\n\r\n                    const order_id = result.insertId;\r\n\r\n                    const mapCartItems = req.body.cartItems.map(x=> \r\n                        {let rObj = [];\r\n                        rObj[0]=order_id; \r\n                        rObj[1]=x._id;\r\n                        rObj[2]=x.model; \r\n                        rObj[3]=x.quantity;\r\n                        return rObj}\r\n                    )\r\n\r\n                    sql = \"INSERT INTO order_products (order_id,product_id,model,quantity) VALUES ?\"\r\n                    connection.query(sql, [mapCartItems], function(err, result) {\r\n                        if (err) { \r\n                            connection.rollback(function() {\r\n                            throw err;\r\n                            });\r\n                        }\r\n                        \r\n                        connection.commit(function(err) {\r\n                            if (err) { \r\n                                connection.rollback(function() {\r\n                                    throw err;\r\n                                });\r\n                            }\r\n                            console.log('Transaction Completed Successfully.');\r\n                            var response={order_id}\r\n                            res.status(200).send(response);\r\n                            connection.release();\r\n                        });                        \r\n                    });\r\n                });                \r\n            });\r\n        });\r\n          /* End transaction */\r\n    });\r\n});\r\n\r\nrouter.post(\"/\", isAuth, isAdmin, async (req, res)=>{\r\n    mysqlConnection.getConnection(function(err, connection) {\r\n        if (err) throw err; // not connected!\r\n\r\n        let sql=\"\"\r\n        if(req.body.status===\"Όλες\")\r\n        {\r\n            sql = \"SELECT * FROM orders ORDER BY orderDate DESC LIMIT ? OFFSET ?\";\r\n            connection.query(sql,[req.body.itemsPerPage, req.body.offset], function(err, result) {\r\n                if (err) throw err;\r\n                let resp= result;\r\n\r\n                connection.query('SELECT COUNT(*) AS count FROM orders',\r\n                     function (err, result, fields) {\r\n                        if (err) throw err;\r\n                        let count = result;\r\n\r\n                        res.send({resp,count});\r\n                    })\r\n            });\r\n        }\r\n        else\r\n        {\r\n            sql = \"SELECT * FROM orders WHERE status=? ORDER BY orderDate DESC LIMIT ? OFFSET ?\";\r\n            connection.query(sql,[req.body.status,req.body.itemsPerPage, req.body.offset], function(err, result) {\r\n                if (err) throw err;\r\n                \r\n                let resp= result;\r\n                \r\n                connection.query('SELECT COUNT(*) AS count FROM orders WHERE status=?',\r\n                [req.body.status], function (err, result, fields) {\r\n                        if (err) throw err;\r\n                        let count = result;\r\n\r\n                        res.send({resp,count});\r\n                    })\r\n            });\r\n        }        \r\n        \r\n        connection.release();\r\n\r\n        // Handle error after the release.\r\n        if (err) throw err;\r\n    });\r\n});\r\n\r\nrouter.get(\"/:id\", isAuth, isAdmin, async (req, res)=>{\r\n    const orderId = req.params.id;\r\n    mysqlConnection.getConnection(function(err, connection) {\r\n        if (err) throw err; // not connected!\r\n        /* Begin transaction */\r\n        connection.beginTransaction(function(err) {\r\n            if (err) { throw err; }\r\n\r\n            let sql = \"SELECT * FROM orders WHERE order_id=?\";\r\n            connection.query(sql, [orderId], function(err, result) {\r\n            if (err) { \r\n                connection.rollback(function() {\r\n                throw err;\r\n                });\r\n            }\r\n        \r\n            const order = result[0];\r\n        \r\n            sql = \"SELECT addresses.* FROM addresses INNER JOIN orders ON addresses.address_id = orders.billingAddress WHERE orders.order_id=?\";\r\n            connection.query(sql, [orderId], function(err, result) {\r\n                if (err) { \r\n                connection.rollback(function() {\r\n                    throw err;\r\n                });\r\n                }\r\n\r\n                var billingAddress = result[0];\r\n\r\n                sql = \"SELECT addresses.* FROM addresses INNER JOIN orders ON addresses.address_id = orders.shippingAddress WHERE orders.order_id=?\";\r\n                connection.query(sql, [orderId], function(err, result) {\r\n                    if (err) { \r\n                    connection.rollback(function() {\r\n                        throw err;\r\n                    });\r\n                    }\r\n\r\n                    var shippingAddress = result[0];\r\n\r\n                    sql = \"SELECT products._id, products.name, products.image, products.category,products.subcategory, products.totalPrice, products.countInStock, order_products.quantity, order_products.model, order_products.image_case FROM products INNER JOIN order_products ON products._id = order_products.product_id WHERE order_products.order_id=?\";\r\n                    connection.query(sql, [orderId], function(err, result) {\r\n                        if (err) { \r\n                        connection.rollback(function() {\r\n                            throw err;\r\n                        });\r\n                        }\r\n\r\n                        var products = result;\r\n\r\n                        var response = {\r\n                            order,\r\n                            billingAddress,\r\n                            shippingAddress,\r\n                            products\r\n                        };\r\n                        res.send(response);\r\n\r\n\r\n                        connection.commit(function(err) {\r\n                        if (err) { \r\n                            connection.rollback(function() {\r\n                            throw err;\r\n                            });\r\n                        }\r\n                        console.log('Transaction Completed Successfully.');\r\n                        connection.release();\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n            });\r\n        });\r\n        /* End transaction */\r\n\r\n        // Handle error after the release.\r\n        if (err) throw err;\r\n    });\r\n});\r\n\r\nrouter.put(\"/changeStatus\", isAuth, isAdmin, async (req, res)=>{\r\n    \r\n    try{\r\n        mysqlConnection.getConnection(function(err, connection) {\r\n            if (err) throw err; // not connected!\r\n            switch (req.body.dates.dateIndex) {\r\n                case 0:\r\n                    var sql = \"UPDATE orders SET status=?, proccessDate=?, delayDate=?, shippingDate=?, cancelDate=? WHERE order_id=?\";\r\n                    connection.query(sql,[req.body.newStatus,req.body.dates.proccessDate, req.body.dates.delayDate,\r\n                        req.body.dates.shippingDate, req.body.dates.cancelDate, req.body.orderId], function (err, result, fields) {\r\n                        if (err) throw err;\r\n                        console.log(\"Order Status updated\");\r\n                        res.status(200).send(\"OK\");\r\n                        connection.release();\r\n                \r\n                        // Handle error after the release.\r\n                        if (err) throw err;\r\n                    })\r\n                break;\r\n                case 1:\r\n                    var sql = \"UPDATE orders SET status=?, delayDate=?, shippingDate=?, cancelDate=? WHERE order_id=?\";\r\n                    connection.query(sql,[req.body.newStatus, req.body.dates.delayDate,\r\n                        req.body.dates.shippingDate, req.body.dates.cancelDate, req.body.orderId], function (err, result, fields) {\r\n                        if (err) throw err;\r\n                        console.log(\"Order Status updated\");\r\n                        res.status(200).send(\"OK\");\r\n                        connection.release();\r\n                \r\n                        // Handle error after the release.\r\n                        if (err) throw err;\r\n                    })\r\n                break;\r\n                case 2:\r\n                    var sql = \"UPDATE orders SET status=?, shippingDate=?, cancelDate=? WHERE order_id=?\";\r\n                    connection.query(sql,[req.body.newStatus,req.body.dates.shippingDate,\r\n                         req.body.dates.cancelDate, req.body.orderId], function (err, result, fields) {\r\n                        if (err) throw err;\r\n                        console.log(\"Order Status updated\");\r\n                        res.status(200).send(\"OK\");\r\n                        connection.release();\r\n                \r\n                        // Handle error after the release.\r\n                        if (err) throw err;\r\n                    })\r\n                break;\r\n                case 3:\r\n                    var sql = \"UPDATE orders SET status=?, cancelDate=? WHERE order_id=?\";\r\n                    connection.query(sql,[req.body.newStatus, req.body.dates.cancelDate, req.body.orderId], function (err, result, fields) {\r\n                        if (err) throw err;\r\n                        console.log(\"Order Status updated\");\r\n                        res.status(200).send(\"OK\");\r\n                        connection.release();\r\n                \r\n                        // Handle error after the release.\r\n                        if (err) throw err;\r\n                    })\r\n                break;\r\n            \r\n                default:\r\n                    break;\r\n            }\r\n            \r\n        });\r\n           \r\n    }\r\n    catch(error){\r\n        res.send({message: error.message});\r\n    }\r\n});\r\n\r\nrouter.put(\"/updateStatus\", isAuth, isAdmin, async (req, res)=>{\r\n    \r\n    try{\r\n        mysqlConnection.getConnection(function(err, connection) {\r\n            if (err) throw err; // not connected!\r\n            \r\n            switch (req.body.StatusIndex) {\r\n                case 1:\r\n                    var sql = \"UPDATE orders SET status=?, proccessDate=? WHERE order_id=?\";\r\n                    connection.query(sql,[req.body.newStatus, new Date, req.body.orderId], function (err, result, fields) {\r\n                        if (err) throw err;\r\n                        console.log(\"Order Status updated\");\r\n                        res.status(200).send(\"OK\");\r\n                        connection.release();\r\n                \r\n                        // Handle error after the release.\r\n                        if (err) throw err;\r\n                    })\r\n                break;\r\n                case 2:\r\n                    var sql = \"UPDATE orders SET status=?, delayDate=? WHERE order_id=?\";\r\n                    connection.query(sql,[req.body.newStatus, new Date, req.body.orderId], function (err, result, fields) {\r\n                        if (err) throw err;\r\n                        console.log(\"Order Status updated\");\r\n                        res.status(200).send(\"OK\");\r\n                        connection.release();\r\n                \r\n                        // Handle error after the release.\r\n                        if (err) throw err;\r\n                    })\r\n                break;\r\n                case 3:\r\n                    var sql = \"UPDATE orders SET status=?, shippingDate=? WHERE order_id=?\";\r\n                    connection.query(sql,[req.body.newStatus,new Date, req.body.orderId], function (err, result, fields) {\r\n                        if (err) throw err;\r\n                        console.log(\"Order Status updated\");\r\n                        res.status(200).send(\"OK\");\r\n                        connection.release();\r\n                \r\n                        // Handle error after the release.\r\n                        if (err) throw err;\r\n                    })\r\n                break;\r\n                case 4:\r\n                    var sql = \"UPDATE orders SET status=?, cancelDate=? WHERE order_id=?\";\r\n                    connection.query(sql,[req.body.newStatus, new Date, req.body.orderId], function (err, result, fields) {\r\n                        if (err) throw err;\r\n                        console.log(\"Order Status updated\");\r\n                        res.status(200).send(\"OK\");\r\n                        connection.release();\r\n                \r\n                        // Handle error after the release.\r\n                        if (err) throw err;\r\n                    })\r\n                break;\r\n            \r\n                default:\r\n                    break;\r\n            }\r\n            \r\n        });\r\n           \r\n    }\r\n    catch(error){\r\n        res.send({message: error.message});\r\n    }\r\n});\r\n\r\nrouter.put(\"/changeOrderDetails\", isAuth, isAdmin, async (req, res)=>{\r\n    \r\n    try{\r\n        mysqlConnection.getConnection(function(err, connection) {\r\n            if (err) throw err; // not connected!\r\n            \r\n            connection.beginTransaction(function(err) {\r\n                if (err) { throw err; }\r\n\r\n            var sql = \"UPDATE orders SET sendingMethod=?, shippingPrice=?, paymentMethod=?,paymentMethodPrice=?, paymentType=? WHERE order_id=?\";\r\n            connection.query(sql,[req.body.sendingMethod, req.body.shippingPrice, req.body.paymentMethod, req.body.paymentMethodCost, req.body.paymentType, req.body.orderId], function (err, result, fields) {\r\n                if (err) { \r\n                    connection.rollback(function() {\r\n                    throw err;\r\n                    });\r\n                }\r\n\r\n                sql = \"SELECT * FROM orders WHERE order_id=?\";\r\n                connection.query(sql, [req.body.orderId], function(err, result) {\r\n                    if (err) { \r\n                        connection.rollback(function() {\r\n                        throw err;\r\n                        });\r\n                    }\r\n                        res.status(201).send(result);\r\n\r\n\r\n                        connection.commit(function(err) {\r\n                        if (err) { \r\n                            connection.rollback(function() {\r\n                            throw err;\r\n                            });\r\n                        }\r\n                        console.log('Transaction Completed Successfully.');\r\n                        connection.release();\r\n                    })\r\n                })                    \r\n            })\r\n                // Handle error after the release.\r\n                if (err) throw err;\r\n            })            \r\n        });           \r\n    }\r\n    catch(error){\r\n        res.send({message: error.message});\r\n    }\r\n});\r\n\r\nrouter.put(\"/updateChargerAddress\", isAuth, isAdmin, async (req, res)=>{\r\n    \r\n    try{\r\n        mysqlConnection.getConnection(function(err, connection) {\r\n            if (err) throw err; // not connected!\r\n            \r\n            if(req.body.paymentType==='Τιμολόγιο')\r\n            {\r\n                var sql = \"UPDATE addresses INNER JOIN orders ON addresses.address_id=orders.billingAddress SET companyName=?, bussiness=?, afm=?, doy=?, country=?, district=?, city=?, street=?, phoneNumber=?, postalCode=?, comments=? WHERE orders.order_id=?\";\r\n                connection.query(sql,[req.body.charger.companyName, req.body.charger.bussiness, req.body.charger.afm, req.body.charger.doy, req.body.charger.country, req.body.charger.district, req.body.charger.city, \r\n                    req.body.charger.street, req.body.charger.phoneNumber, req.body.charger.postalCode, \r\n                    req.body.charger.comments, req.body.orderId], function (err, result, fields) {\r\n                    if (err) throw err;\r\n                    console.log(\"Order Details updated\");\r\n                    res.status(200).send(\"OK\");\r\n                    connection.release();\r\n            \r\n                    // Handle error after the release.\r\n                    if (err) throw err;\r\n                })\r\n            }\r\n            else if(req.body.paymentType==='Απόδειξη')\r\n            {\r\n                var sql = \"UPDATE addresses INNER JOIN orders ON addresses.address_id=orders.billingAddress SET name=?, subname=?, country=?, district=?, city=?, street=?, phoneNumber=?, postalCode=?, comments=? WHERE orders.order_id=?\";\r\n                connection.query(sql,[req.body.charger.name, req.body.charger.subname, \r\n                    req.body.charger.country, req.body.charger.district, req.body.charger.city, \r\n                    req.body.charger.street, req.body.charger.phoneNumber, req.body.charger.postalCode, \r\n                    req.body.charger.comments, req.body.orderId], function (err, result, fields) {\r\n                    if (err) throw err;\r\n                    console.log(\"Order Details updated\");\r\n                    res.status(200).send(\"OK\");\r\n                    connection.release();\r\n            \r\n                    // Handle error after the release.\r\n                    if (err) throw err;\r\n                })\r\n            }\r\n        });           \r\n    }\r\n    catch(error){\r\n        res.send({message: error.message});\r\n    }\r\n});\r\n\r\nrouter.put(\"/updateShippingAddress\", isAuth, isAdmin, async (req, res)=>{    \r\n    try{\r\n        mysqlConnection.getConnection(function(err, connection) {\r\n            if (err) throw err; // not connected!\r\n            \r\n            if(req.body.shippingAddress)\r\n            {\r\n                var sql = \"UPDATE addresses INNER JOIN orders ON addresses.address_id=orders.shippingAddress SET name=?, subname=?, country=?, district=?, city=?, street=?, postalCode=? WHERE orders.order_id=?\";\r\n                connection.query(sql,[req.body.shippingTo.name, req.body.shippingTo.subname, \r\n                    req.body.shippingTo.country, req.body.shippingTo.district, req.body.shippingTo.city, \r\n                    req.body.shippingTo.street, req.body.shippingTo.postalCode, req.body.orderId], function (err, result, fields) {\r\n                    if (err) throw err;\r\n                    console.log(\"Order Details updated\");\r\n                    res.status(200).send(\"OK\");\r\n                    connection.release();\r\n            \r\n                    // Handle error after the release.\r\n                    if (err) throw err;\r\n                })\r\n            }\r\n            else\r\n            {\r\n                /* Begin transaction */\r\n                connection.beginTransaction(function(err) {\r\n                    if (err) { throw err; }\r\n\r\n                    var sql = \"INSERT INTO addresses (name, subname, country, district, city, street, postalCode) VALUE (?, ?, ?, ?, ?, ?, ?)\";\r\n                    connection.query(sql, [req.body.shippingTo.name, req.body.shippingTo.subname, \r\n                        req.body.shippingTo.country, req.body.shippingTo.district, req.body.shippingTo.city, \r\n                        req.body.shippingTo.street, req.body.shippingTo.postalCode] , function(err, result) {\r\n                    if (err) { \r\n                        connection.rollback(function() {\r\n                        throw err;\r\n                        });\r\n                    }\r\n                \r\n                    const shippingAddress_id = result.insertId;\r\n                \r\n                    sql = \"UPDATE orders SET shippingAddress=? WHERE order_id=?\";\r\n                    connection.query(sql, [shippingAddress_id, req.body.orderId], function(err, result) {\r\n                        if (err) { \r\n                        connection.rollback(function() {\r\n                            throw err;\r\n                        });\r\n                        }\r\n                        connection.commit(function(err) {\r\n                        if (err) { \r\n                            connection.rollback(function() {\r\n                            throw err;\r\n                            });\r\n                        }\r\n                        console.log('Transaction Completed Successfully.');\r\n                        connection.release();\r\n                        });\r\n                    });\r\n                    });\r\n                });\r\n                /* End transaction */\r\n            }            \r\n        });           \r\n    }\r\n    catch(error){\r\n        res.send({message: error.message});\r\n    }\r\n});\r\n\r\nrouter.put(\"/updateOrder\", isAuth, isAdmin, async (req, res)=>{\r\n    \r\n    try{\r\n        mysqlConnection.getConnection(function(err, connection) {\r\n            if (err) throw err; // not connected!\r\n            \r\n            var sql = \"UPDATE order_products SET quantity=? WHERE order_id=? && model=? && product_id=?\";\r\n            connection.query(sql,[req.body.quantity, req.body.order_id, req.body.model, req.body.product_id], function (err, result, fields) {\r\n                if (err) throw err;\r\n                console.log(\"Order updated\");\r\n                res.status(200).send(\"OK\");\r\n                connection.release();\r\n        \r\n                // Handle error after the release.\r\n                if (err) throw err;\r\n            })\r\n            \r\n        });           \r\n    }\r\n    catch(error){\r\n        res.send({message: error.message});\r\n    }\r\n});\r\n\r\nrouter.post(\"/removeOrderItem\", isAuth, isAdmin, async (req, res)=>{\r\n    \r\n    try{\r\n        mysqlConnection.getConnection(function(err, connection) {\r\n            if (err) throw err; // not connected!\r\n            \r\n            var sql = \"DELETE FROM order_products WHERE order_id=? && model=? && product_id=?\";\r\n            connection.query(sql,[ req.body.order_id, req.body.model, req.body.product_id], function (err, result, fields) {\r\n                if (err) throw err;\r\n                console.log(\"Item deleted\");\r\n                res.status(200).send(\"OK\");\r\n                connection.release();\r\n        \r\n                // Handle error after the release.\r\n                if (err) throw err;\r\n            })\r\n            \r\n        });           \r\n    }\r\n    catch(error){\r\n        res.send({message: error.message});\r\n    }\r\n});\r\n\r\nrouter.post(\"/customerOrders\", isAuth, async (req, res)=>{\r\n    mysqlConnection.getConnection(function(err, connection) {\r\n        if (err) throw err; // not connected!\r\n\r\n        let sql = \"SELECT * FROM orders WHERE user_id=? ORDER BY orderDate DESC\";\r\n        connection.query(sql,[req.body.email], function(err, result) {\r\n            if (err) throw err;\r\n            \r\n            res.send(result);\r\n        });\r\n        connection.release();\r\n\r\n        // Handle error after the release.\r\n        if (err) throw err;\r\n    });\r\n});\r\n\r\nrouter.get(\"/customerOrders/:id\", isAuth, async (req, res)=>{\r\n    const orderId = req.params.id;\r\n    mysqlConnection.getConnection(function(err, connection) {\r\n        if (err) throw err; // not connected!\r\n        /* Begin transaction */\r\n        connection.beginTransaction(function(err) {\r\n            if (err) { throw err; }\r\n\r\n            let sql = \"SELECT * FROM orders WHERE order_id=?\";\r\n            connection.query(sql, [orderId], function(err, result) {\r\n            if (err) { \r\n                connection.rollback(function() {\r\n                throw err;\r\n                });\r\n            }\r\n        \r\n            const order = result[0];\r\n        \r\n            sql = \"SELECT addresses.* FROM addresses INNER JOIN orders ON addresses.address_id = orders.billingAddress WHERE orders.order_id=?\";\r\n            connection.query(sql, [orderId], function(err, result) {\r\n                if (err) { \r\n                connection.rollback(function() {\r\n                    throw err;\r\n                });\r\n                }\r\n\r\n                var billingAddress = result[0];\r\n\r\n                sql = \"SELECT addresses.* FROM addresses INNER JOIN orders ON addresses.address_id = orders.shippingAddress WHERE orders.order_id=?\";\r\n                connection.query(sql, [orderId], function(err, result) {\r\n                    if (err) { \r\n                    connection.rollback(function() {\r\n                        throw err;\r\n                    });\r\n                    }\r\n\r\n                    var shippingAddress = result[0];\r\n\r\n                    sql = \"SELECT products._id, products.name, products.image, products.category,products.subcategory, products.totalPrice, products.countInStock, order_products.quantity, order_products.model FROM products INNER JOIN order_products ON products._id = order_products.product_id WHERE order_products.order_id=?\";\r\n                    connection.query(sql, [orderId], function(err, result) {\r\n                        if (err) { \r\n                        connection.rollback(function() {\r\n                            throw err;\r\n                        });\r\n                        }\r\n\r\n                        var products = result;\r\n\r\n                        var response = {\r\n                            order,\r\n                            billingAddress,\r\n                            shippingAddress,\r\n                            products\r\n                        };\r\n                        res.send(response);\r\n\r\n\r\n                        connection.commit(function(err) {\r\n                        if (err) { \r\n                            connection.rollback(function() {\r\n                            throw err;\r\n                            });\r\n                        }\r\n                        connection.release();\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n            });\r\n        });\r\n        /* End transaction */\r\n\r\n        // Handle error after the release.\r\n        if (err) throw err;\r\n    });\r\n});\r\n\r\n\r\nexport default router;"],"file":"orderRoute.js"}