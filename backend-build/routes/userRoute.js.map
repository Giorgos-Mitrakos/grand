{"version":3,"sources":["../../backend/routes/userRoute.js"],"names":["router","express","Router","get","req","res","mysqlConnection","getConnection","err","connection","query","result","fields","console","log","send","release","bcrypt","hash","sql","error","message","post","body","email","length","password","compare","response","Object","keys","forEach","key","row","user","username","isAdmin","token","status","success","beginTransaction","name","rollback","commit","put","isAuth","subname","phoneNumber","country","district","city","address","postalCode","user_email","street","companyName","bussiness","afm","doy","next","newPassword","newhash","jwt","verify","config","JWT_SECRET","decode","msg"],"mappings":"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","sourcesContent":["import express from 'express';\r\nimport { getToken, isAuth } from '../util.js';\r\nimport mysqlConnection from '../connection';\r\nimport bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\nimport config from '../config';\r\n\r\nconst router= express.Router();\r\n\r\nrouter.get(\"/\", (req, res)=>{\r\n    \r\n    mysqlConnection.getConnection(function(err, connection) {\r\n        if (err) throw err; // not connected!\r\n\r\n        connection.query('SELECT * FROM users', function (err, result, fields) {\r\n        if (err) throw err;\r\n        console.log(\"Read user succeed\");\r\n        res.send(result);\r\n        connection.release();\r\n\r\n        // Handle error after the release.\r\n        if (err) throw err;\r\n        })\r\n    });\r\n})\r\n\r\nrouter.get(\"/createadmin\", async (req, res)=>{\r\n    try{\r\n        mysqlConnection.getConnection(function(err, connection) {\r\n            if (err) throw err; // not connected!\r\n    \r\n            bcrypt.hash(\"TryGra20#@\", 10, (err, hash) => {\r\n                // Store hash in your password DB.\r\n                var sql = \"INSERT INTO users (username, email, password, isAdmin) VALUES ('grand', 'grandmobile@grandmobile.gr',?, 1)\";\r\n                connection.query(sql,[hash], function (err, result, fields) {\r\n                if (err) throw err;\r\n                console.log(\"1 record inserted\");\r\n                \r\n                connection.release();\r\n        \r\n                // Handle error after the release.\r\n                if (err) throw err;\r\n                })\r\n            })\r\n\r\n            bcrypt.hash(\"TsiGra20#@\", 10, (err, hash) => {\r\n                // Store hash in your password DB.\r\n                var sql = \"INSERT INTO users (username, email, password, isAdmin) VALUES ('grand1', 'grandmobile1@grandmobile.gr',?, 1)\";\r\n                connection.query(sql,[hash], function (err, result, fields) {\r\n                if (err) throw err;\r\n                connection.release();\r\n        \r\n                // Handle error after the release.\r\n                if (err) throw err;\r\n                })\r\n            })\r\n\r\n            res.send(\"OK\")\r\n        });\r\n    }\r\n    catch(error){\r\n        res.send({message: error.message});\r\n    }\r\n})\r\n\r\nrouter.post(\"/signin\", async (req, res) =>{\r\n\r\n    mysqlConnection.getConnection(function(err, connection) {\r\n        if (err) throw err; // not connected!\r\n\r\n        var sql = \"SELECT password FROM users WHERE email=? LIMIT 1\";\r\n        connection.query(sql, [req.body.email],function (err, result, fields) {\r\n            if (err) throw err;\r\n            \r\n            if(result.length!==0){\r\n                let hash=result[0].password;\r\n                bcrypt.compare(req.body.password, hash, function(err, response) {\r\n                    if(response===true)\r\n                    {\r\n                        sql = \"SELECT username,email,isAdmin,name,subname,phoneNumber FROM users WHERE email=? AND password=?\";\r\n                        connection.query(sql, [req.body.email,hash],function (err, result, fields) {\r\n                        if (err) throw err;\r\n                        \r\n                            console.log(\"Query executed successfully\");\r\n                            Object.keys(result).forEach(function(key) {\r\n                                var row = result[key];\r\n                                const user = {\r\n                                    username: row.username,\r\n                                    email: row.email,\r\n                                    isAdmin: row.isAdmin\r\n                                };\r\n\r\n                                res.send({\r\n                                    username: row.username,\r\n                                    email: row.email,\r\n                                    isAdmin: row.isAdmin,\r\n                                    token: getToken(user)\r\n                                })\r\n                            });            \r\n                        \r\n                        // Handle error after the release.\r\n                        if (err) throw err;\r\n                        })\r\n                    }\r\n                    else{\r\n                        res.status(401).send({message:'Λάθος password'});\r\n                    }\r\n                });\r\n            }\r\n            else{\r\n                res.status(401).send({message:'Δεν υπάρχει εγγραφή με αυτό το email!'});\r\n            }\r\n        })\r\n    });\r\n})\r\n \r\nrouter.post(\"/register\", async (req, res) =>{\r\n\r\n    mysqlConnection.getConnection(function(err, connection) {\r\n        if (err) throw err; // not connected!\r\n\r\n        let sql = \"SELECT email FROM users WHERE email=?\";\r\n        connection.query(sql, [req.body.email], function (err, result, fields) {\r\n            if (err) throw err;\r\n\r\n            if(Object.keys(result).length!==0){\r\n                res.status(401).send({message:'Υπάρχει ήδη καταχώρηση με αυτό το email', success:false});                       \r\n            }\r\n            else{\r\n                /* Begin transaction */\r\n                connection.beginTransaction(function(err) {\r\n                    if (err) { throw err; }\r\n\r\n                    bcrypt.hash(req.body.password, 10, (err, hash) => {\r\n                            // Store hash in your password DB.\r\n                   \r\n                            sql = \"INSERT INTO users (username, email, password, isAdmin) VALUES (?, ?,?, 0)\";\r\n                            connection.query(sql, [req.body.name,req.body.email,hash], function(err, result, fields) {\r\n                            if (err) { \r\n                                connection.rollback(function() {\r\n                                throw err;\r\n                                });\r\n                            }\r\n                    \r\n                              \r\n                                sql = \"INSERT INTO addresses (user_email,user_id) VALUES (?,?)\";\r\n                                connection.query(sql, [req.body.email,req.body.email], function(err, result, fields) {\r\n                                    if (err) { \r\n                                    connection.rollback(function() {\r\n                                        throw err;\r\n                                    });\r\n                                    }\r\n\r\n                                    sql = \"SELECT * FROM users WHERE email=?\";\r\n                                    connection.query(sql, [req.body.email], function(err, result, fields) {\r\n                                        if (err) { \r\n                                        connection.rollback(function() {\r\n                                            throw err;\r\n                                        });\r\n                                        }\r\n\r\n                                        if(Object.keys(result).length!==0){\r\n                                            Object.keys(result).forEach(function(key) {\r\n                                                var row = result[key];\r\n                                                const user = {\r\n                                                    username: row.username,\r\n                                                    email: row.email,\r\n                                                    isAdmin: row.isAdmin\r\n                                                };\r\n                                \r\n                                                res.send({\r\n                                                    username: row.username,\r\n                                                    email: row.email,\r\n                                                    isAdmin: row.isAdmin,\r\n                                                    token: getToken(user),\r\n                                                    success:true\r\n                                                })\r\n                                            });\r\n                                        }\r\n                                    \r\n                                        connection.commit(function(err) {\r\n                                        if (err) { \r\n                                            connection.rollback(function() {\r\n                                            throw err;\r\n                                            });\r\n                                        }\r\n                                        console.log('Transaction Completed Successfully.');\r\n                                        });\r\n                                    });\r\n                                });\r\n                            });\r\n                        \r\n                    });\r\n                });\r\n                /* End transaction */\r\n                    \r\n                    sql = \"SELECT * FROM users WHERE email=?\";\r\n                    connection.query(sql, [req.body.email], function (err, result, fields) {\r\n                    if (err) throw err;\r\n                    \r\n                    console.log(\"Query executed successfully\");\r\n                    \r\n                });\r\n        \r\n            }\r\n        });\r\n\r\n        \r\n        connection.release();\r\n\r\n        // Handle error after the release.\r\n        if (err) throw err;\r\n    });\r\n});\r\n\r\nrouter.put(\"/accountInfo\", isAuth, async (req,res) =>{ \r\n    mysqlConnection.getConnection(function(err, connection) {\r\n        if (err) throw err; // not connected!\r\n\r\n        let sql = \"UPDATE addresses SET name=?, subname=?, phoneNumber=?,country=?, district=?, city=?, street=?, postalCode=? WHERE user_id=?\";\r\n        connection.query(sql, [req.body.name,req.body.subname,req.body.phoneNumber,req.body.country,\r\n            req.body.district,req.body.city,req.body.address,req.body.postalCode,req.body.email], function (err, result, fields) {\r\n            if (err) throw err;\r\n    \r\n            res.status(200).send({message:\"Οι αλλαγές αποθηκεύτηκαν\"})\r\n        });\r\n\r\n        connection.release();\r\n        // Handle error after the release.\r\n        if (err) throw err;\r\n    });            \r\n});\r\n                \r\nrouter.post(\"/accountInfo\", isAuth, async (req,res) =>{ \r\n    mysqlConnection.getConnection(function(err, connection) {\r\n        if (err) throw err; // not connected!\r\n\r\n        let sql = \"SELECT * FROM addresses WHERE user_id=?\";\r\n        connection.query(sql,[req.body.email], function (err, result, fields) {\r\n            if (err) throw err;\r\n    \r\n            if(Object.keys(result).length!==0){\r\n                Object.keys(result).forEach(function(key) {\r\n                    var row = result[key];\r\n                        \r\n                    res.send({\r\n                        name: row.name,\r\n                        subname: row.subname,\r\n                        phoneNumber: row.phoneNumber,\r\n                        country: row.country,\r\n                        district: row.district,\r\n                        city: row.city,\r\n                        email: row.user_email,\r\n                        address: row.street,\r\n                        postalCode: row.postalCode,\r\n                        companyName:row.companyName,\r\n                        bussiness:row.bussiness,\r\n                        afm:row.afm,\r\n                        doy:row.doy,\r\n                        success:true\r\n                    })\r\n                });\r\n            }\r\n        });\r\n        connection.release();\r\n        // Handle error after the release.\r\n        if (err) throw err;\r\n    });            \r\n});\r\n\r\nrouter.put(\"/changePassword\", isAuth, async (req,res,next) =>{\r\n  \r\n    mysqlConnection.getConnection(function(err, connection) {\r\n        if (err) throw err; // not connected!\r\n\r\n        var sql = \"SELECT password FROM users WHERE email=? LIMIT 1\";\r\n        connection.query(sql, [req.body.email],function (err, result, fields) {\r\n            if (err) throw err;\r\n            \r\n            if(result.length!==0){\r\n                let hash=result[0].password;\r\n                bcrypt.compare(req.body.password, hash, function(err, response) {\r\n                    if(response===true)\r\n                    {\r\n                        bcrypt.hash(req.body.newPassword, 10, (err, newhash) => {\r\n                            sql = \"UPDATE users SET password=? WHERE email=?\";\r\n                            connection.query(sql, [newhash, req.body.email],function (err, result, fields) {\r\n                                if (err) throw err;\r\n                            \r\n                                console.log(\"Query executed successfully\");\r\n                                res.status(201).send({message:'Ο κωδικός άλλαξε επιτυχώς'});\r\n                            })\r\n                        })\r\n                    }\r\n                    else{\r\n                        res.status(401).send({message:'Λάθος password'});\r\n                    }\r\n                });\r\n            }\r\n            else{\r\n                res.status(401).send({message:'Δεν υπάρχει εγγραφή με αυτό το email!'});\r\n            }\r\n            connection.release();\r\n            // Handle error after the release.\r\n            if (err) throw err;\r\n        })\r\n    });\r\n\r\n})\r\n\r\nrouter.post(\"/addForNewsletter\", async (req, res) =>{\r\n\r\n    mysqlConnection.getConnection(function(err, connection) {\r\n        if (err) throw err; // not connected!\r\n\r\n        let sql = \"SELECT email FROM newsletters WHERE email=?\";\r\n        connection.query(sql, [req.body.email], function (err, result, fields) {\r\n            if (err) throw err;\r\n\r\n            if(Object.keys(result).length!==0){\r\n                console.log(\"email already existed\");\r\n                res.send({message:'email already existed', success:false});                       \r\n            }\r\n            else{              \r\n                sql = \"INSERT INTO newsletters (email) VALUES (?)\";\r\n                connection.query(sql, [req.body.email], function (err, result, fields) {\r\n                if (err) throw err;\r\n                \r\n                console.log(\"Query executed successfully\");\r\n                res.status(200).send({message:'Email inserted Successfully', success:true});\r\n                })\r\n            }\r\n        });\r\n\r\n        \r\n        connection.release();\r\n\r\n        // Handle error after the release.\r\n        if (err) throw err;\r\n    });\r\n});\r\n\r\nrouter.post(\"/removeFromNewsletter\", async (req, res) =>{\r\n\r\n    mysqlConnection.getConnection(function(err, connection) {\r\n        if (err) throw err; // not connected!\r\n\r\n        let sql = \"SELECT * FROM newsletters WHERE email=?\";\r\n        connection.query(sql, [req.body.email], function (err, result, fields) {\r\n            if (err) throw err;\r\n\r\n            if(Object.keys(result).length===0)\r\n            {\r\n                res.send({message:'No such email exists', success:false});                       \r\n            }\r\n            else{\r\n                let sql = \"DELETE FROM newsletters WHERE email=?\";\r\n                connection.query(sql, [req.body.email], function (err, result, fields) {\r\n                if (err) throw err;\r\n\r\n                res.send({message:'email deleted successfully', success:true})\r\n                });\r\n            }\r\n\r\n        })\r\n        connection.release();\r\n\r\n        // Handle error after the release.\r\n        if (err) throw err;\r\n    });\r\n});\r\n\r\nrouter.post(\"/updatepassword\", async (req,res) =>{\r\n  \r\n    mysqlConnection.getConnection(function(err, connection) {\r\n      if (err) throw err; // not connected!\r\n  \r\n      var sql ='SELECT * FROM users WHERE email=?';\r\n      connection.query(sql, [req.body.email], function (err, result, fields) {\r\n        if (err) throw err;\r\n      \r\n        if(Object.keys(result).length===0){\r\n          console.log(\"User not found\");\r\n          res.status(404).send({message:'Δεν βρέθηκε χρήστης με αυτό το email!'});          \r\n        }\r\n        else\r\n        {\r\n            jwt.verify(req.body.token, config.JWT_SECRET, (err, decode)=>{\r\n                if(err)\r\n                {\r\n                    return res.status(403).send({msg: 'Ο σύνδεσμος που χρησιμοποιήσατε έχει λήξει\\n Παρακαλώ επαναλάβετε τη διαδικασία επανάκτησης του κωδικού.'});\r\n                }\r\n                if(decode.username===result.username && decode.password===result.password)\r\n                {\r\n                    bcrypt.hash(req.body.password, 10, (err, hash) => {\r\n                        var sql = 'UPDATE users SET password=? WHERE email=?';\r\n                        connection.query(sql, [hash,req.body.email], function (err, result, fields) {\r\n                        if (err) throw err;\r\n                \r\n                        res.status(200).send({message:\"Password Updated\"})\r\n                        });\r\n\r\n                    })\r\n                }\r\n            })\r\n            \r\n        }\r\n      });   \r\n      \r\n      connection.release();\r\n  \r\n      // Handle error after the release.\r\n      if (err) throw err;\r\n    });\r\n})\r\n\r\nrouter.post(\"/deleteAccount\", isAuth, async (req, res) =>{\r\n\r\n    mysqlConnection.getConnection(function(err, connection) {\r\n        if (err) throw err; // not connected!\r\n\r\n        let sql = \"SELECT email FROM users WHERE email=?\";\r\n        connection.query(sql, [req.body.email], function (err, result, fields) {\r\n            if (err) throw err;\r\n\r\n            if(Object.keys(result).length===0){\r\n                console.log(\"No user with this email existed\");\r\n                res.send({message:'No user with this email existed', success:false});                       \r\n            }\r\n            else{\r\n                /* Begin transaction */\r\n                connection.beginTransaction(function(err) {\r\n                    if (err) { throw err; }\r\n\r\n                    let sql = \"DELETE FROM wishlists WHERE user_email=?\";\r\n                        connection.query(sql, [req.body.email], function(err, result, fields) {\r\n                            if (err) { \r\n                                connection.rollback(function() {\r\n                                throw err;\r\n                                });\r\n                            }\r\n                            sql = \"DELETE FROM cart WHERE user_email=?\";\r\n                            connection.query(sql, [req.body.email], function(err, result, fields) {\r\n                                if (err) { \r\n                                    connection.rollback(function() {\r\n                                    throw err;\r\n                                    });\r\n                                }\r\n                                sql = \"UPDATE addresses SET user_id='' WHERE user_email=?\";\r\n                                connection.query(sql, [req.body.email], function(err, result, fields) {\r\n                                if (err) { \r\n                                    connection.rollback(function() {\r\n                                    throw err;\r\n                                    });\r\n                                }\r\n                                    sql = \"DELETE FROM users WHERE email=?\";\r\n                                    connection.query(sql, [req.body.email], function(err, result, fields) {\r\n                                    if (err) { \r\n                                        connection.rollback(function() {\r\n                                        throw err;\r\n                                        });\r\n                                    }\r\n                                    res.status(200).send({message:'Account deleted successfully', success:true})\r\n                                    connection.commit(function(err) {\r\n                                        if (err) { \r\n                                            connection.rollback(function() {\r\n                                            throw err;\r\n                                            });\r\n                                        }\r\n                                    })\r\n                                })\r\n                            })\r\n                        })\r\n                    })\r\n\r\n                });\r\n                /* End transaction */\r\n            }\r\n        });\r\n\r\n        \r\n        connection.release();\r\n\r\n        // Handle error after the release.\r\n        if (err) throw err;\r\n    });\r\n});\r\n\r\n\r\nexport default router;"],"file":"userRoute.js"}