{"version":3,"sources":["../../backend/routes/cartRoute.js"],"names":["fs","require","router","express","Router","storageB","multer","diskStorage","destination","req","file","cb","filename","fileName","Date","now","body","model","replace","email","originalname","fileFilter","mimetype","Error","uploadCaseImage","storage","post","isAuth","res","mysqlConnection","getConnection","err","connection","sql","query","product_id","qty","result","fields","console","log","send","release","single","next","beginTransaction","rollback","productId","_id","path","slice","length","commit","user_email","cart_id","image_case","unlink"],"mappings":"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","sourcesContent":["import express from 'express';\r\nimport multer from 'multer';\r\nimport { isAuth } from '../util.js';\r\nimport mysqlConnection from '../connection';\r\nconst fs = require('fs');\r\n\r\nconst router= express.Router();\r\n\r\nconst storageB = multer.diskStorage({\r\n    destination: function (req, file, cb) {\r\n        cb(null, 'frontend/public/images/makeyourcase')\r\n    },\r\n    filename: (req, file, cb) => {\r\n      const fileName = Date.now()  + '-' + req.body.model.replace(/ /g,\"-\") + '-' + req.body.email+  '-' + file.originalname;\r\n      cb(null, fileName);\r\n    }\r\n  });\r\n\r\nconst fileFilter = (req, file, cb) => {\r\n    if (file.mimetype == \"image/png\" || file.mimetype == \"image/jpg\" || file.mimetype == \"image/jpeg\" || file.mimetype == \"image/gif\") {\r\n        cb(null, true);\r\n    } else {\r\n        cb(null, false);\r\n        return cb(new Error('Allowed only .png, .jpg, .jpeg and .gif'));\r\n    }\r\n}\r\n\r\nconst uploadCaseImage = multer({ storage: storageB, fileFilter: fileFilter });\r\n\r\nrouter.post(\"/insert_item\", isAuth, async (req,res) =>{ \r\n    mysqlConnection.getConnection(function(err, connection) {\r\n        if (err) throw err; // not connected!\r\n\r\n        let sql = \"INSERT INTO cart (user_email, product_id, model, quantity) VALUES (?,?,?,?)\";\r\n        connection.query(sql, [req.body.email, req.body.product_id, req.body.model, req.body.qty], function (err, result, fields) {\r\n                if( err & err != \"ER_DUP_ENTRY\" ){\r\n                console.log(\"Entry is already\");\r\n            }\r\n\r\n            console.log(\"Item inserted successfully\");\r\n        })\r\n          \r\n        sql = \"SELECT products._id, products.name, products.category, products.brand, products.image, products.description, products.price, products.countInStock, cart.model, cart.quantity FROM products LEFT JOIN cart ON products._id = cart.product_id WHERE cart.user_email=?\";\r\n        connection.query(sql, [req.body.email], function(err, result) {\r\n            if (err) throw err;\r\n            res.send(result);\r\n        });\r\n\r\n        \r\n        \r\n        connection.release();\r\n        // Handle error after the release.\r\n        if (err) throw err;\r\n         \r\n    });\r\n\r\n});\r\n\r\nrouter.post(\"/insert_image_case_item\", isAuth, uploadCaseImage.single('image'), async (req,res,next) =>{\r\n    mysqlConnection.getConnection(function(err, connection){\r\n        if (err) throw err; // not connected!\r\n    \r\n        /* Begin transaction */\r\n        connection.beginTransaction(function(err) {\r\n            if (err) { throw err; }\r\n    \r\n            let sql = \"SELECT products._id FROM products WHERE products.category='Φτιάξε τη Θήκη σου'\";\r\n            connection.query(sql, function(err, result, fields) {\r\n            if (err) { \r\n                connection.rollback(function() {\r\n                throw err;\r\n                });\r\n            }\r\n\r\n            var productId=result[0]._id;\r\n        \r\n            sql = \"INSERT INTO cart (product_id,user_email, model, quantity, image_case) VALUES (?, ?, ?, ?, ?)\";\r\n                connection.query(sql, [productId, req.body.email, req.body.model, req.body.qty, req.file.path.slice(15,req.file.path.length)],\r\n                function (err, result, fields) {\r\n                    if( err & err != \"ER_DUP_ENTRY\" ){\r\n                        connection.rollback(function() {\r\n                        throw err;\r\n                    });\r\n                }\r\n                \r\n                sql = \"SELECT products._id, products.name, products.category, products.brand, products.image, products.description, products.price, products.countInStock, cart.model, cart.quantity, cart.image_case FROM products LEFT JOIN cart ON products._id = cart.product_id WHERE cart.user_email=?\";\r\n                    connection.query(sql, [req.body.email], function(err, result) {\r\n                        if (err) throw err;\r\n                        res.send(result);\r\n                    \r\n\r\n                    connection.commit(function(err) {\r\n                    if (err) { \r\n                        connection.rollback(function() {\r\n                        throw err;\r\n                        });\r\n                    }\r\n                    console.log('Transaction Completed Successfully.');\r\n                    connection.release();\r\n                    });\r\n                });\r\n            });\r\n            });\r\n        });\r\n        /* End transaction */\r\n    })   \r\n  })\r\n\r\nrouter.post(\"/update_item\", isAuth, async (req,res) =>{ \r\n    mysqlConnection.getConnection(function(err, connection) {\r\n        if (err) throw err; // not connected!\r\n\r\n        let sql = \"UPDATE cart SET model=?, quantity=? WHERE user_email=? && cart_id=?\";\r\n        connection.query(sql, [req.body.model, req.body.qty, req.body.user_email, req.body.cart_id], function (err, result, fields) {\r\n            if (err) throw err;\r\n\r\n            console.log(\"Item updated successfully\");\r\n        })\r\n\r\n        sql = \"SELECT products._id, products.name, products.category, products.brand, products.image, products.description, products.totalPrice, products.countInStock, products.percentage, cart.cart_id, cart.model, cart.quantity, cart.image_case FROM cart LEFT JOIN products ON cart.product_id = products._id WHERE cart.user_email=?\";\r\n        connection.query(sql, [req.body.user_email], function(err, result) {\r\n            if (err) throw err;\r\n            \r\n            res.send(result);\r\n        });\r\n               \r\n        \r\n        connection.release();\r\n        // Handle error after the release.\r\n        if (err) throw err;\r\n         \r\n    });\r\n\r\n});\r\n\r\nrouter.post(\"/remove_item\", isAuth, async (req,res) =>{ \r\n    mysqlConnection.getConnection(function(err, connection) {\r\n        if (err) throw err; // not connected!\r\n        if(req.body.image_case)\r\n        {\r\n            fs.unlink(\"frontend/public\"+req.body.image_case, (err) => {\r\n                if (err) throw err;\r\n                console.log(`successfully deleted ${req.body.image_case}`);\r\n            });\r\n        }\r\n\r\n        let sql = \"DELETE FROM cart WHERE cart_id=?\";\r\n        connection.query(sql, [req.body.cart_id], function (err, result, fields) {\r\n            if (err) throw err;\r\n\r\n            console.log(\"Product deleted from cart\");\r\n        })\r\n\r\n        sql = \"SELECT products._id, products.name, products.category, products.brand, products.image, products.description, products.totalPrice, products.countInStock,cart.cart_id, cart.model, cart.quantity, cart.image_case FROM cart INNER JOIN products ON cart.product_id = products._id WHERE cart.user_email=?\";\r\n        connection.query(sql, [req.body.user_email], function(err, result) {\r\n            if (err) throw err;\r\n            \r\n            res.send(result);\r\n        });\r\n        \r\n        connection.release();\r\n        // Handle error after the release.\r\n        if (err) throw err;\r\n         \r\n    });\r\n});\r\n\r\nrouter.post(\"/get_cart\", isAuth, async (req, res) =>{\r\n    mysqlConnection.getConnection(function(err, connection) {\r\n        if (err) throw err; // not connected!\r\n\r\n        let sql = \"SELECT products._id, products.name, products.category, products.brand, products.image, products.description, products.totalPrice, products.countInStock, products.percentage, cart.cart_id, cart.model, cart.quantity, cart.image_case FROM cart LEFT JOIN products ON cart.product_id = products._id WHERE cart.user_email=?\";\r\n        connection.query(sql, [req.body.user_email], function(err, result) {\r\n            if (err) throw err;\r\n            res.send(result);\r\n        });\r\n        connection.release();\r\n\r\n        // Handle error after the release.\r\n        if (err) throw err;\r\n    });\r\n})\r\n\r\nexport default router;"],"file":"cartRoute.js"}